{"meta":{"title":"WMYeah","subtitle":"风的点滴","description":"随风逝去","author":"WMYeah","url":"http://www.wmyeah.com","root":"/"},"pages":[{"title":"about","date":"2022-12-27T19:58:22.000Z","updated":"2022-12-29T07:32:46.158Z","comments":true,"path":"about/index.html","permalink":"http://www.wmyeah.com/about/index.html","excerpt":"","text":""},{"title":"categories","date":"2022-12-27T18:52:00.000Z","updated":"2022-12-29T07:32:46.158Z","comments":true,"path":"categories/index.html","permalink":"http://www.wmyeah.com/categories/index.html","excerpt":"","text":""},{"title":"link","date":"2022-12-27T18:52:34.000Z","updated":"2022-12-29T07:32:46.158Z","comments":true,"path":"link/index.html","permalink":"http://www.wmyeah.com/link/index.html","excerpt":"","text":""},{"title":"tags","date":"2022-12-27T18:51:00.000Z","updated":"2022-12-29T07:32:46.158Z","comments":true,"path":"tags/index.html","permalink":"http://www.wmyeah.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Hi WellComing","slug":"index","date":"2022-12-27T18:52:00.000Z","updated":"2022-12-29T07:32:46.154Z","comments":true,"path":"2022/12/27/index/","link":"","permalink":"http://www.wmyeah.com/2022/12/27/index/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"CentOS8.X 安装后调优","slug":"Linux/dev_Linux_centos8_00","date":"2020-04-04T00:00:00.000Z","updated":"2022-12-29T07:32:46.154Z","comments":true,"path":"2020/04/04/Linux/dev_Linux_centos8_00/","link":"","permalink":"http://www.wmyeah.com/2020/04/04/Linux/dev_Linux_centos8_00/","excerpt":"","text":"目录： 1. 部分常用开发工具安装 2. 安装epel源 3. 更换yum源为阿里云yum源（国内提速） 4. 关闭防火墙 5. 关闭selinux 6. 重启系统 使其生效 7. PS: 1. 部分常用开发工具安装1yum -y install nano vim wget curl net-tools lsof unzip unzip 2. 安装epel源1yum install epel-release 3. 更换yum源为阿里云yum源（国内提速） 备份yum源 1mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak 下载阿里云yum 源 1wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-8.repo 确保&#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Media.repo 文件中 enabled&#x3D;0 1vim /etc/yum.repos.d/CentOS-Media.repo 一步到位更新 1yum clean all &amp;&amp; yum makecache &amp;&amp; yum update 4. 关闭防火墙 查看 1systemctl status firewalld 关闭 1systemctl stop firewalld 关闭开机自启 1systemctl disable firewalld 5. 关闭selinux 查看 1getenforce 永久关闭 123456vim /etc/selinux/config将SELINUX=enforcing改成SELINUX=disabled 6. 重启系统 使其生效1reboot 7. PS: 根据网上资料亲测整理，最终解释权归WMYeah所有! 参考资料Centos8（最小化安装）全新安装Python3.8+pip的方法教程","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://www.wmyeah.com/tags/Linux/"}]},{"title":"Ubuntu Server 18.0.4.4 KVM 虚拟化搭建","slug":"KVM/kvm_ubuntu_01","date":"2020-04-02T00:00:00.000Z","updated":"2022-12-29T07:32:46.154Z","comments":true,"path":"2020/04/02/KVM/kvm_ubuntu_01/","link":"","permalink":"http://www.wmyeah.com/2020/04/02/KVM/kvm_ubuntu_01/","excerpt":"","text":"目录： 1. KVM安装 1.1. 检查是否支持 1.2. 安装 cpu-checker 检查工具并检查机器是否支持 kvm 1.3. 开始安装 2. PS: 1. KVM安装1.1. 检查是否支持1egrep -c &#x27;(vmx|svm)&#x27; /proc/cpuinfo 1.2. 安装 cpu-checker 检查工具并检查机器是否支持 kvm 安装cpu-checker1apt install cpu-checker 检查1kvm-ok 1.3. 开始安装 更新apt源并且安装kvm及相关组件 12apt update &amp;&amp; apt install qemu qemu-kvm libvirt-bin bridge-utils virt-manager 设置网络桥接 共4网卡，2网卡给虚拟机，2网卡留给物理机 1234567891011121314151617181920212223242526272829303132333435363738network: ethernets: eno1: addresses: - 192.168.0.6/24 gateway4: 192.168.0.1 nameservers: addresses: - 192.168.0.1 eno2: addresses: - 192.168.0.5/24 gateway4: 192.168.0.1 nameservers: addresses: - 192.168.0.1 eno3: dhcp4: no dhcp6: no eno4: dhcp4: no dhcp6: no bridges: br0: interfaces: [eno3] dhcp4: no addresses: [192.168.0.4/24] gateway4: 192.168.0.1 nameservers: addresses: [192.168.0.1] br1: interfaces: [eno4] dhcp4: no addresses: [192.168.0.3/24] gateway4: 192.168.0.1 nameservers: addresses: [192.168.0.1] version: 2 更新配置 及 查看 1234# 更新netplan apply# 查看networkctl status -a 2. PS: 此操作基于（root）权限操作，如用普通用户可在命令行前加“sudo” 根据网上资料亲测整理，最终解释权归WMYeah所有!","categories":[],"tags":[]},{"title":"CentOS8.X 安装Python3.8.x","slug":"Linux/dev_Linux_centos8_python_01","date":"2020-04-02T00:00:00.000Z","updated":"2022-12-29T07:32:46.154Z","comments":true,"path":"2020/04/02/Linux/dev_Linux_centos8_python_01/","link":"","permalink":"http://www.wmyeah.com/2020/04/02/Linux/dev_Linux_centos8_python_01/","excerpt":"","text":"目录： 1. 安装依赖 2. 安装Python3.8.2 2.1. 安装并配置python 2.2. 更换pip源加速pip下载速度（此处使用阿里云） 2.3. 更新pip 3. 番外 virtualenv 和 virtualenvwrapper 的安装 3.1. virtualenv 3.2. virtualenvwrapper 4. PS: 1. 安装依赖 注意一定要先安装依赖包，依赖包顺序如下（亲测、、、顺序搞错导 会导致 pip某些包无法安装）1234567891011121314yum install wgetyum install setup yum install perlyum install openssl-develyum install zlib-develyum groupinstall &quot;Development tools&quot;yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-develyum install gdbm-devel db4-devel libpcap-devel xz-develyum install zlib1g-devyum install zlib*yum install libffi-develyum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel 2. 安装Python3.8.22.1. 安装并配置python 12345678910wget https://www.python.org/ftp/python/3.8.2/Python-3.8.2.tar.xztar -xvJf Python-3.8.2.tar.xzmkdir /usr/local/python3 cd Python-3.8.2./configure --prefix=/usr/local/python3 --enable-optimizations --with-ssl make &amp;&amp; make installln -s /usr/local/python3/bin/python3 /usr/bin/python3ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3ln -s /usr/bin/python3 /usr/bin/pythonln -s /usr/bin/pip3 /usr/bin/pip 2.2. 更换pip源加速pip下载速度（此处使用阿里云） 编辑命令 123mkdir -p ~/.pipvim ~/.pip/pip.conf 文件内容 12345[global]index-url = http://mirrors.aliyun.com/pypi/simple [install]trusted-host=mirrors.aliyun.com 2.3. 更新pip1pip3 install --upgrade pip 3. 番外 virtualenv 和 virtualenvwrapper 的安装3.1. virtualenv1pip install virtualenv 3.2. virtualenvwrapper1pip install virtualenvwrapper 4. PS: 根据网上资料亲测整理，最终解释权归WMYeah所有! 参考资料Centos8（最小化安装）全新安装Python3.8+pip的方法教程","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://www.wmyeah.com/tags/Linux/"}]},{"title":"R730xd Ubuntu server 20.04 安装并调优","slug":"Linux/dev_linux_ubuntu20.04_01","date":"2020-04-02T00:00:00.000Z","updated":"2022-12-29T07:32:46.154Z","comments":true,"path":"2020/04/02/Linux/dev_linux_ubuntu20.04_01/","link":"","permalink":"http://www.wmyeah.com/2020/04/02/Linux/dev_linux_ubuntu20.04_01/","excerpt":"","text":"目录： 1. 修改apt源为阿里云 1.1. 备份系统自带源 1.2. 修改源为阿里云 1.3. 更新apt 1.4. 关闭SNAP自动更新 2. PS: 1. 修改apt源为阿里云1.1. 备份系统自带源1mv /etc/apt/sources.list /etc/apt/sources.list.bak 1.2. 修改源为阿里云 编辑apt源文件 1vim /etc/apt/sources.list apt源文件 &#x2F;etc&#x2F;apt&#x2F;sources.list 内容 1234567891011121314deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiversedeb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiversedeb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse 1.3. 更新apt123apt updateapt upgrade 1.4. 关闭SNAP自动更新12345systemctl disable &#123;snapd,snapd.socket,snapd.refresh.timer&#125;systemctl stop &#123;snapd,snapd.socket,snapd.refresh.timer&#125;vim /etc/apt/apt.conf.d/20auto-upgrades# 将1 改为0 2. PS: 此操作基于（root）权限操作，如用普通用户可在命令行前加“sudo” 根据网上资料亲测整理，最终解释权归WMYeah所有!","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://www.wmyeah.com/tags/Linux/"}]},{"title":"利用Crontab 定时任务自动git pull更新代码","slug":"Git/git_auto-gitpull","date":"2019-12-25T00:00:00.000Z","updated":"2022-12-29T07:32:46.154Z","comments":true,"path":"2019/12/25/Git/git_auto-gitpull/","link":"","permalink":"http://www.wmyeah.com/2019/12/25/Git/git_auto-gitpull/","excerpt":"","text":"目录： 1. Crontab操作 2. 在需要更新的git项目文件夹内编辑git_pull.sh 3. PS: 1. Crontab操作 1-1、编辑crontab 1crontab -e 1-2、将以下代码放入脚本 12# 脚本目录、日志目录 根据自己实际情况设定*/2 * * * * /home/git_test/git_pull.sh &gt;&gt; /home/logs/git_pull.log 2&gt;&amp;1 &amp; 2. 在需要更新的git项目文件夹内编辑git_pull.sh 2-1、编辑 1vim git_pull.sh 2-2、内容 12345#!/bin/bashcu_sp_path=/home/git_testcd $&#123;cu_sp_path&#125; &amp;&amp; git pullecho &quot;[&quot;$&#123;cu_sp_path&#125;&quot;] update with [&quot;`date`&quot;]&quot; 2-3、赋予权限 1chmod -R 777 git_pull.sh 3. PS: 根据网上资料亲测整理，最终解释权归WMYeah所有!","categories":[],"tags":[]},{"title":"linux python 常用命令","slug":"Python/dev_python_002","date":"2019-08-15T00:00:00.000Z","updated":"2022-12-29T07:32:46.154Z","comments":true,"path":"2019/08/15/Python/dev_python_002/","link":"","permalink":"http://www.wmyeah.com/2019/08/15/Python/dev_python_002/","excerpt":"","text":"目录： 1. Centos 篇 1.1. virtualenvwrapper 操作Python 虚拟环境virtualenv 1.1.1. 指定版本创建 1.1.2. 删除pyenv 1.1.3. 切换 py-env环境 1.1.4. 离开当前虚拟环境 2. PS: 1. Centos 篇1.1. virtualenvwrapper 操作Python 虚拟环境virtualenv1.1.1. 指定版本创建1234virtualenv -p $&#123;python-path&#125; $&#123;virtualenv-name&#125;# $&#123;python-path&#125; 欲指定python 版本路径# $&#123;virtualenv-name&#125; 欲指定 py-env 名称 1.1.2. 删除pyenv123rmvirtualenv $&#123;virtualenv-name&#125;# $&#123;virtualenv-name&#125; py-env 名称 1.1.3. 切换 py-env环境123workon $&#123;virtualenv-name&#125;# $&#123;virtualenv-name&#125; py-env 名称 1.1.4. 离开当前虚拟环境1deactivate 2. PS: 根据网上资料亲测整理，最终解释权归WMYeah所有!","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://www.wmyeah.com/tags/Linux/"}]},{"title":"Python 爬虫常用命令集锦","slug":"Python/py_sprider_01","date":"2019-08-15T00:00:00.000Z","updated":"2022-12-29T07:32:46.154Z","comments":true,"path":"2019/08/15/Python/py_sprider_01/","link":"","permalink":"http://www.wmyeah.com/2019/08/15/Python/py_sprider_01/","excerpt":"","text":"目录： 1. 说明: 2. python BeautifulSoup怎么获取无标签文本 3. 时间函数处理 4. 关于open()的mode参数： 5. PS: 1. 说明: 常用命令集锦 2. python BeautifulSoup怎么获取无标签文本12get_name = soup_data.find_all(&#x27;div&#x27;, attrs=&#123;&#x27;class&#x27;: &#x27;inf-get_name&#x27;&#125;)get_name = BeautifulSoup(str(get_name), &#x27;html.parser&#x27;).get_text().replace(&quot;\\n&quot;,&quot;&quot;).replace(&quot; &quot;,&quot;&quot;).replace(&quot;[&quot;,&quot;&quot;).replace(&quot;]&quot;,&quot;&quot;) 3. 时间函数处理123456789101112131415# -*- coding:utf-8 -*-import time#当前时间print time.time()#时间戳形式print time.localtime(time.time())#简单可读形式print time.asctime( time.localtime(time.time()) )# 格式化成2015-02-11 10:45:39形式print time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time.localtime()) # 格式化成Sat Mar 28 22:24:24 2016形式print time.strftime(&quot;%a %b %d %H:%M:%S %Y&quot;, time.localtime()) # 将格式字符串转换为时间戳a = &quot;Sat Mar 28 22:24:24 2016&quot;print time.mktime(time.strptime(a,&quot;%a %b %d %H:%M:%S %Y&quot;)) 4. 关于open()的mode参数：123456789101112131415&#x27;r&#x27;：读&#x27;w&#x27;：写&#x27;a&#x27;：追加&#x27;r+&#x27; == r+w（可读可写，文件若不存在就报错(IOError)）&#x27;w+&#x27; == w+r（可读可写，文件若不存在就创建）&#x27;a+&#x27; ==a+r（可追加可写，文件若不存在就创建）对应的，如果是二进制文件，就都加一个b就好啦：&#x27;rb&#x27; &#x27;wb&#x27; &#x27;ab&#x27; &#x27;rb+&#x27; &#x27;wb+&#x27; &#x27;ab+&#x27; 5. PS: 根据网上资料亲测整理，最终解释权归WMYeah所有! 参考资料: 1、gitolite README.markdown 2、gitolite wiki 2、Ubuntu下安装Git和Gitolite","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://www.wmyeah.com/tags/Linux/"}]},{"title":"Mac Pyhton3.7+Django2+Xadmin","slug":"Python/dev_python_001","date":"2018-11-15T00:00:00.000Z","updated":"2022-12-29T07:32:46.154Z","comments":true,"path":"2018/11/15/Python/dev_python_001/","link":"","permalink":"http://www.wmyeah.com/2018/11/15/Python/dev_python_001/","excerpt":"","text":"目录： 1. 环境准备 1.1. Python 1.2. Django2 1.3. Xadmin 1.4. 设置 1.5. 时区及本地显示 1.6. 依赖文件处理 1.7. 修改本版本Bug 2. 部署（CentOS7） 3. PS: 1. 环境准备1.1. Python 此处使用Python3.7 1.2. Django2 本文使用Django2.1.3 1.3. Xadmin Git远程源码安装（截止本文最新版本为2.0.1） 1pip3 install git+git://github.com/sshwsfc/xadmin.git@django2 卸载 xadmin并改用本地安装(主要是为了保留依赖环境) 1pip3 uninstall xadmin 将自行下载的Xadmin拖入新建工程根目录 新建apps（存放主App） 新建extra_apps目录（存放 第三方App） 将xamdin 目录从根目录下拖拽到extra_apps目录下（去掉下面的勾选） 选中《extra_apps》目录 → 右键 → Mark Directory as → Sources Root 注册 App 添加 xadmin、reversion 12345678910INSTALLED_APPS = [ &#x27;django.contrib.admin&#x27;, &#x27;django.contrib.auth&#x27;, &#x27;django.contrib.contenttypes&#x27;, &#x27;django.contrib.sessions&#x27;, &#x27;django.contrib.messages&#x27;, &#x27;django.contrib.staticfiles&#x27;, &#x27;xadmin&#x27;, &#x27;reversion&#x27;] 说明 12341、以下设置可直接运行Xadmin自身进行测试2、主要是尽量不动第三方App的情况下自主开发自有管理系统,所以只需要依赖环境3、保留xadmin本地文件主要是为了更正xadmin中的bug，并且可以和其他小伙伴一起享用同一套代码4、所以本人将不会 对‘Xadmin’进行注册，而是注册依赖于Xadmin的自建App 1.4. 设置 使用PyCharm自带Terminal在工程根目录下进行操作 更新 1./manage.py makemigrations 同步库表结构 1./manage.py migrate 创建超级管理员 1./manage.py createsuperuser 1.5. 时区及本地显示 在settings.py中修改 12345LANGUAGE_CODE = &#x27;zh-hans&#x27;TIME_ZONE = &#x27;Asia/Shanghai&#x27;USE_I18N = TrueUSE_L10N = TrueUSE_TZ = False 1.6. 依赖文件处理1234# 依赖文件生成pip freeze &gt; requirements.txt# 依赖文件安装pip install -r requirement.txt 1.7. 修改本版本Bug .&#x2F;xadmin&#x2F;views&#x2F;dashboard.py 第36行进行修改 1234* 将如下代码def render(self, name, value, attrs=None):* 修改为def render(self, name, value, attrs=None, renderer=None): 2. 部署（CentOS7） 安装 virtualenv 1pip3 install virtualenv 建立软链接 1ln -s /usr/local/python3/bin/virtualenv /usr/bin/virtualenv 创建python_web虚拟环境 1virtualenv --python=/usr/bin/python3 python_web 进入{python_web&#x2F;bin}目录，启动虚拟环境 1source activate 在虚拟环境中使用pip3安django和uwsgi 1234pip3 install djangopip3 install uwsgiln -s /usr/local/python3/bin/uwsgi /usr/bin/uwsgi #建立uwsgi软链接以方便使用 启动项目(进入项目目录中) 1python3 manage.py runserver 在项目根目录下配置UWSGI 1234567&lt;uwsgi&gt; &lt;socket&gt;127.0.0.1:8180&lt;/socket&gt; &lt;!-- 内部端口，自定义 --&gt; &lt;chdir&gt;/home/mysite/&lt;/chdir&gt; &lt;!-- 项目路径 --&gt; &lt;module&gt;mysite.wsgi&lt;/module&gt; &lt;!-- mysite为wsgi.py所在目录名--&gt; &lt;processes&gt;1&lt;/processes&gt; &lt;!-- 进程数 --&gt; &lt;daemonize&gt;/home/logs/mysite.uwsgi.log&lt;/daemonize&gt; &lt;!-- 日志文件 --&gt;&lt;/uwsgi&gt; 生成requirements.txt文件 1pip freeze &gt; requirements.txt 安装requirements.txt依赖 1pip install -r requirements.txt 3. PS: 根据网上资料亲测整理，最终解释权归WMYeah所有!","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://www.wmyeah.com/tags/Linux/"}]},{"title":"Ubuntu 18.04 安装最新版本 Nginx","slug":"Linux/dev_Linux_Ubuntu18.04_nginx_01","date":"2018-08-15T00:00:00.000Z","updated":"2022-12-29T07:32:46.154Z","comments":true,"path":"2018/08/15/Linux/dev_Linux_Ubuntu18.04_nginx_01/","link":"","permalink":"http://www.wmyeah.com/2018/08/15/Linux/dev_Linux_Ubuntu18.04_nginx_01/","excerpt":"","text":"1. 编辑源 2. 源内容 3. 添加nginx 公钥 4. 更新并安装 5. PS: 1. 编辑源1vim /etc/apt/sources.list.d/nginx.list 2. 源内容12deb [arch=amd64] http://nginx.org/packages/mainline/ubuntu/ bionic nginxdeb-src http://nginx.org/packages/mainline/ubuntu/ bionic nginx 3. 添加nginx 公钥 下载nginx 公钥 1wget http://nginx.org/keys/nginx_signing.key 添加 1apt-key add nginx_signing.key 4. 更新并安装12apt updateapt install nginx 5. PS: 根据网上资料亲测整理，最终解释权归WMYeah所有!","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://www.wmyeah.com/tags/Linux/"}]},{"title":"CentOS7.X yum方式安装最新版本Redis","slug":"Linux/dev_Linux_redis_01","date":"2018-08-15T00:00:00.000Z","updated":"2022-12-29T07:32:46.154Z","comments":true,"path":"2018/08/15/Linux/dev_Linux_redis_01/","link":"","permalink":"http://www.wmyeah.com/2018/08/15/Linux/dev_Linux_redis_01/","excerpt":"","text":"目录： 1. 更新yum源 2. 安装redis-rpm源 3. 安装Redis 4. 开机自启Redis 5. 设置redis.conf 6. PS: 1. 更新yum源1yum update 2. 安装redis-rpm源1yum install http://rpms.famillecollet.com/enterprise/remi-release-7.rpm 3. 安装Redis1yum --enablerepo=remi install redis 4. 开机自启Redis1systemctl enable redis 5. 设置redis.conf bind 127.0.0.1 改为 bind 0.0.0.0(可选) 1vim /etc/redis.conf 6. PS: 根据网上资料亲测整理，最终解释权归WMYeah所有! 参考资料:","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://www.wmyeah.com/tags/Linux/"}]},{"title":"CentOS7.4 zookeeper单机模式安装，并设置开机自启","slug":"Linux/dev_Linux_zoo_01","date":"2018-08-13T00:00:00.000Z","updated":"2022-12-29T07:32:46.154Z","comments":true,"path":"2018/08/13/Linux/dev_Linux_zoo_01/","link":"","permalink":"http://www.wmyeah.com/2018/08/13/Linux/dev_Linux_zoo_01/","excerpt":"","text":"目录： 1. 更新Yum源 2. 获取最新的zookeeper Tar包 3. 安装JDK（官网下载 此处选择的是 rpm包安装） 4. 设置开机自启 5. PS: 1. 更新Yum源1yum update 2. 获取最新的zookeeper Tar包12345wget http://mirrors.hust.edu.cn/apache/zookeeper/zookeeper-3.4.13/zookeeper-3.4.13.tar.gz# 解压tar -zxvf zookeeper-3.4.13.tar.gz 3. 安装JDK（官网下载 此处选择的是 rpm包安装） rpm包主要是为了自动配置环境变量1rpm -ivh jdk-8u181-linux-x64.rpm 4. 设置开机自启 遵循系统的权限管理模式 所以 参照 系统ngix.server 服务编写 1vim /usr/lib/systemd/system/zookeeper.service 内容 12345678910111213[Unit]Description=zookeeperAfter=syslog.target network.target[Service]Type=forkingEnvironment=ZOO_LOG_DIR=/home/zookeeper/log //这里必须填写绝对路径ExecStart=/zookeeper安装目录/bin/zkServer.sh startExecStop=/zookeeper安装目录/zoo/bin/zkServer.sh stopRestart=always[Install]WantedBy=multi-user.target 软连接 12ln -s /usr/lib/systemd/system/zookeeper.service /etc/systemd/system/zookeeper.service 5. PS: 根据网上资料亲测整理，最终解释权归WMYeah所有! 参考资料: 1、Centos7以普通用户启动zookeeper并加入开机自启动服务","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://www.wmyeah.com/tags/Linux/"}]},{"title":"CocoaPods使用问题汇总","slug":"iOS/iOS_03","date":"2018-04-08T00:00:00.000Z","updated":"2022-12-29T07:32:46.154Z","comments":true,"path":"2018/04/08/iOS/iOS_03/","link":"","permalink":"http://www.wmyeah.com/2018/04/08/iOS/iOS_03/","excerpt":"","text":"目录： 1. 说明: 2. 将变化提交到暂存区 3. PS: 1. 说明: CocoaPods 使用过程中得问题记录 2. 将变化提交到暂存区 Q: gem install cocoapods ERROR: While executing gem … (Gem::FilePermissionError)A: 改用如下命令1sudo gem install -n /usr/local/bin cocoapods 3. PS: 根据网上资料亲测整理，最终解释权归WMYeah所有!","categories":[],"tags":[{"name":"iOS","slug":"iOS","permalink":"http://www.wmyeah.com/tags/iOS/"}]},{"title":"CentOS6.9 后台自制shell循环任务+nohup运行SrpingBoot Jar包","slug":"Linux/dev_Linux_centos6.9_01","date":"2018-04-05T00:00:00.000Z","updated":"2022-12-29T07:32:46.154Z","comments":true,"path":"2018/04/05/Linux/dev_Linux_centos6.9_01/","link":"","permalink":"http://www.wmyeah.com/2018/04/05/Linux/dev_Linux_centos6.9_01/","excerpt":"","text":"目录： 1. Shell脚本示例 2. 将写好的xxPlugin 放入&#x2F;etc&#x2F;init.d目录内 3. PS: 1. Shell脚本示例12345678910#!/bin/bash#chkconfig: 2345 99 99#description:xxPlugin# *jar 为要执行的jar包所在绝对路径# log_file 为转储运行日志绝对路径# 前三行必写 description:为脚本描述建议20字符以内nohup java -jar *.jar &gt;log_file &amp; 2. 将写好的xxPlugin 放入&#x2F;etc&#x2F;init.d目录内 运行如下命令 1234567# 添加自启服务chkconfig --add zjbjPlugin # 查看自启服务chkconfig --list# 如需删除请按如下命令执行 chkconfig --del zjbjPlugin 3. PS: 根据网上资料亲测整理，最终解释权归WMYeah所有!","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://www.wmyeah.com/tags/Linux/"}]},{"title":"CentOS7.X 搭建LNMP平台(Yum方式)","slug":"Linux/dev_Linux_LNMP_01","date":"2017-08-21T00:00:00.000Z","updated":"2022-12-29T07:32:46.154Z","comments":true,"path":"2017/08/21/Linux/dev_Linux_LNMP_01/","link":"","permalink":"http://www.wmyeah.com/2017/08/21/Linux/dev_Linux_LNMP_01/","excerpt":"","text":"目录： 1. 说明： 2. 安装php、php-fpm 3. Nginx 4. Mysql 5. PS: 1. 说明：基于 Centos7.3 php5.6 mysql5.6 nginx1.12.1 2. 安装php、php-fpm1234567891011121314151617181920212223242526# 更新yumyum install epel-releaserpm -ivh http://rpms.famillecollet.com/enterprise/remi-release-7.rpm# 1、安装phpyum install --enablerepo=remi --enablerepo=remi-php56 php php-opcache php-devel php-mbstring php-mcrypt php-mysqlnd php-phpunit-PHPUnit php-pecl-xdebug php-gd php-pecl-xhprof# Centos8yum install http://rpms.remirepo.net/enterprise/remi-release-8.rpmyum install --enablerepo=remi --enablerepo=remi-safe php56 php56-php-opcache php-devel php56-php-mbstring php56-php-mcrypt php56-php-mysqlnd php-phpunit-PHPUnit php56-php-pecl-xdebug php56-php-pecl-xhprofapt install php5.6 php5.6-mcrypt php5.6-mbstring php5.6-curl php5.6-cli php5.6-mysql php5.6-gd php5.6-xml php5.6-fpm# 2、安装 php-fpmyum install --enablerepo=remi --enablerepo=remi-php56 php-fpmor【yum install php-fpm】# 3、启动 php-fpmsystemctl start php-fpm# 4、开机自启 php-fpmsystemctl enable php-fpm 3. Nginx123456789101112# 1、更新Yum源yum update# 2、获取最新的Nginx RPM包rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm# 3、安装Nginxyum install nginx# 4、设置开机自启systemctl enable nginx 4. Mysql12345678910111213141516# 1、编辑yum源vim /etc/yum.repos.d/mysql-community.repo[mysql56-community]name=MySQL 5.6 Community Serverbaseurl=http://repo.mysql.com/yum/mysql-5.6-community/el/7/$basearch/enabled=1gpgcheck=1gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql# 2、安装yum install mysql-community-server mysql-community-devel mysql-community-client# 3、开机自启systemctl enable mysqld 5. PS: 根据网上资料亲测整理，最终解释权归WMYeah所有!","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://www.wmyeah.com/tags/Linux/"}]},{"title":"CentOS7.3Yum方式安装Nginx","slug":"Linux/dev_Linux_Nginx_01","date":"2017-08-15T00:00:00.000Z","updated":"2022-12-29T07:32:46.154Z","comments":true,"path":"2017/08/15/Linux/dev_Linux_Nginx_01/","link":"","permalink":"http://www.wmyeah.com/2017/08/15/Linux/dev_Linux_Nginx_01/","excerpt":"","text":"目录： 1. 更新Yum源 2. 获取最新的Nginx RPM包 3. 安装Nginx 4. 设置开机自启 5. PS: 1. 更新Yum源1yum update 2. 获取最新的Nginx RPM包1rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm 3. 安装Nginx1yum install nginx 4. 设置开机自启1systemctl enable nginx 5. PS: 根据网上资料亲测整理，最终解释权归WMYeah所有! 参考资料: 1、nginx: Linux packages","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://www.wmyeah.com/tags/Linux/"}]},{"title":"Jetty9.2 阿里云SSL配置","slug":"Linux/dev_Linux_jetty_02","date":"2017-08-10T00:00:00.000Z","updated":"2022-12-29T07:32:46.154Z","comments":true,"path":"2017/08/10/Linux/dev_Linux_jetty_02/","link":"","permalink":"http://www.wmyeah.com/2017/08/10/Linux/dev_Linux_jetty_02/","excerpt":"","text":"目录： 1. 申请阿里云免费SSL证书 2. 转换证书 3. 编辑“jetty-ssl.xml”文件 4. 配置”jetty-https.xml “ 5. 配置Jetty启动文件 6. PS: 1. 申请阿里云免费SSL证书 阿里云 → 控制台 → 安全（云盾）→ 证书服务 → 购买证书 根据如下路径申请免费证书（购买详细步骤阿里云操作提示中很详细） 2. 转换证书 xxxx.pfx : 阿里云提供的SSL PFX格式文件 your-name.jks ：新文件及命名格式（可根据项目需求自行变换） 转换命令 1keytool -importkeystore -srckeystore xxxx.pfx -destkeystore your-name.jks -srcstoretype PKCS12 -deststoretype JKS 3. 编辑“jetty-ssl.xml”文件 以下下操作均在“$JETTY_HOME”目录下操作 vim etc/jetty-ssl.xml 1234* 如下配置 * etc/your-name.jks : 相对于Jetty根目录的jks证书位置 * your-jks-password : 证书密码 &lt;Set name=&quot;KeyStorePath&quot;&gt;&lt;Property name=&quot;jetty.base&quot; default=&quot;.&quot; /&gt;/&lt;Property name=&quot;jetty.keystore&quot; default=&quot;etc/your-name.jks&quot;/&gt;&lt;/Set&gt; &lt;Set name=&quot;KeyStorePassword&quot;&gt;&lt;Property name=&quot;jetty.keystore.password&quot; default=&quot;your-jks-password&quot;/&gt;&lt;/Set&gt; &lt;Set name=&quot;KeyManagerPassword&quot;&gt;&lt;Property name=&quot;jetty.keymanager.password&quot; default=&quot;your-jks-password&quot;/&gt;&lt;/Set&gt; &lt;Set name=&quot;TrustStorePath&quot;&gt;&lt;Property name=&quot;jetty.base&quot; default=&quot;.&quot; /&gt;/&lt;Property name=&quot;jetty.truststore&quot; default=&quot;etc/your-name.jks&quot;/&gt;&lt;/Set&gt; &lt;Set name=&quot;TrustStorePassword&quot;&gt;&lt;Property name=&quot;jetty.truststore.password&quot; default=&quot;your-jks-password&quot;/&gt;&lt;/Set&gt; 123# 4. 配置&quot;jetty-https.xml &quot;* 进入编辑 vim etc/jetty-https.xml 123* 检查配置 * 8443 ：此处以8443位示例端口 &lt;Set name=&quot;host&quot;&gt;&lt;Property name=&quot;jetty.host&quot; /&gt;&lt;/Set&gt; &lt;Set name=&quot;port&quot;&gt;&lt;Property name=&quot;https.port&quot; default=&quot;8443&quot; /&gt;&lt;/Set&gt; &lt;Set name=&quot;idleTimeout&quot;&gt;&lt;Property name=&quot;https.timeout&quot; default=&quot;30000&quot;/&gt;&lt;/Set&gt; &lt;Set name=&quot;soLingerTime&quot;&gt;&lt;Property name=&quot;https.soLingerTime&quot; default=&quot;-1&quot;/&gt;&lt;/Set&gt; &lt;Set name=&quot;acceptorPriorityDelta&quot;&gt;&lt;Property name=&quot;ssl.acceptorPriorityDelta&quot; default=&quot;0&quot;/&gt;&lt;/Set&gt; &lt;Set name=&quot;selectorPriorityDelta&quot;&gt;&lt;Property name=&quot;ssl.selectorPriorityDelta&quot; default=&quot;0&quot;/&gt;&lt;/Set&gt; &lt;Set name=&quot;acceptQueueSize&quot;&gt;&lt;Property name=&quot;https.acceptQueueSize&quot; default=&quot;0&quot;/&gt;&lt;/Set&gt; 123# 5. 配置Jetty启动文件* 编辑“start.ini” vim start.ini 1* 文件中添加如下代码(&lt;font color = red&gt;尽量在端口配置行上面添加&lt;/font&gt;) etc/jetty-ssl.xml etc/jetty-https.xml 6. PS: 根据网上资料亲测整理，最终解释权归WMYeah所有! 参考资料: 1、Jetty:9.2官方文档：Jetty : The Definitive Reference 2、Jetty9.2官方SSL配置文档","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://www.wmyeah.com/tags/Linux/"}]},{"title":"CentOS7.X 新装后个性化处理","slug":"Linux/dev_Linux_centos7_01","date":"2017-08-01T00:00:00.000Z","updated":"2022-12-29T07:32:46.154Z","comments":true,"path":"2017/08/01/Linux/dev_Linux_centos7_01/","link":"","permalink":"http://www.wmyeah.com/2017/08/01/Linux/dev_Linux_centos7_01/","excerpt":"","text":"目录： 1. 修改HostName 2. Shell脚本中文乱码问题解决 3. 部分常用开发工具安装 4. 关闭防火墙 5. 关闭SELinux 6. 更换yum源及安装EPEL源 7. PS: 1. 修改HostName1234# 设置自定义HostNamehostnamectl set-hostname MyHostName# 查看一下是否生效hostnamectl status 2. Shell脚本中文乱码问题解决123vim /etc/locale.conf## 将默认语言改为中文UTF-8LANG=zh_CN.UTF-8 3. 部分常用开发工具安装1yum -y install nano vim wget curl net-tools lsof unzip unzip 4. 关闭防火墙123systemctl stop firewalldsystemctl disable firewalld 5. 关闭SELinux123sed -i &#x27;s#SELINUX=enforcing#SELINUX=disabled#g&#x27; /etc/selinux/config# 查看grep &#x27;SELINUX=disabled&#x27; /etc/selinux/config 6. 更换yum源及安装EPEL源1234567891011121314mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backupwget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo或者curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo# 安装EPEL源yum install -y epel-release # 执行清理yum clean all # 重建缓存yum makecache 7. PS: 根据网上资料亲测整理，最终解释权归WMYeah所有!","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://www.wmyeah.com/tags/Linux/"}]},{"title":"git修改忽略文件“.gitignore”并立即生效","slug":"Git/git_msg_01","date":"2017-02-20T00:00:00.000Z","updated":"2022-12-29T07:32:46.154Z","comments":true,"path":"2017/02/20/Git/git_msg_01/","link":"","permalink":"http://www.wmyeah.com/2017/02/20/Git/git_msg_01/","excerpt":"","text":"目录： 1. 说明: 2. 清除缓存 记得 带“.” 3. 将变化提交到暂存区 4. 提交并填写相关信息 5. 可选同步到远程分支 1. 说明: 有时候我们得修改忽略文件并立即生效,这样方便我们精细化管理git仓库 2. 清除缓存 记得 带“.”1git rm -r --cached . 3. 将变化提交到暂存区1git add . 4. 提交并填写相关信息1git commit -m &quot;update .gitignore&quot; 5. 可选同步到远程分支12345git push或者git push origin master PS: 根据网上资料亲测整理，最终解释权归WMYeah所有!","categories":[],"tags":[]},{"title":"Android JNI编译so动态库技巧(Mac环境)","slug":"Android/Android_01","date":"2016-11-25T00:00:00.000Z","updated":"2022-12-29T07:32:46.154Z","comments":true,"path":"2016/11/25/Android/Android_01/","link":"","permalink":"http://www.wmyeah.com/2016/11/25/Android/Android_01/","excerpt":"","text":"目录： 1. 工具及环境 1.1. 系统及硬件平台 1.2. 软件及相关工具包 2. PS: 1. 工具及环境1.1. 系统及硬件平台 MacBook Air(made on 2013) MacOS Sierra(10.12.1) 1.2. 软件及相关工具包 Eclipse(Neon)Java EE IDE For Mac(主要为了省事兼顾Java后台CodeReview、根据自身需求选择Eclipse版本) ADT(23.0.7) -PS:Goole官方ADT插件 Android SDK Manager Tools(24.0.1) -PS：有了这个就可以选择下载最新的Android SDK 了（2016-3月份后SDK的下载已经不被墙了，国内多地使用过，操作地域：太原，北京、深圳、西安、上海、杭州） NDK(version-13b) 2. PS: 根据网上资料亲测整理，最终解释权归WMYeah所有! 参考资料: 1、Xcode 6制作动态及静态Framework","categories":[],"tags":[]},{"title":"嵌入式开发之MacOS、iOS串口通讯开发环境准备","slug":"Embedded/embedded_01","date":"2016-10-27T00:00:00.000Z","updated":"2022-12-29T07:32:46.154Z","comments":true,"path":"2016/10/27/Embedded/embedded_01/","link":"","permalink":"http://www.wmyeah.com/2016/10/27/Embedded/embedded_01/","excerpt":"","text":"目录： 1. 说明 2. 准备串口线及对应串口传唤器驱动 2.1. 线材准备 2.2. 对应驱动准备 3. 下载可视化连接工具”CoolTerm_Mac” 4. 验证是否驱动安装完成 5. PS: 1. 说明 WARNING 凡所涉及线材及设备,请自行准备此处仅为当前条件随便购买 2. 准备串口线及对应串口传唤器驱动2.1. 线材准备 优越者 Y-105 USB转RS232 工口 优越者 Y-105D USB转RS232 母口 2.2. 对应驱动准备 购买线材时随附光盘中一般会有 点这里下载基于PL-2303芯片驱动 点这里下载CH430G For Mac 驱动下载 点这里下载CH430G For Linux 驱动下载 3. 下载可视化连接工具”CoolTerm_Mac” CoolTerm_Mac下载地址 4. 验证是否驱动安装完成 设置连接选项 在另一台准备好的机器上输入测试字符 5. PS: 根据网上资料亲测整理，最终解释权归WMYeah所有! 参考资料: 1、Roger Meier’s Freeware 2、Mac’s and serial TTY’s 2、在MAC OS X下安装usb转串口驱动（PL2303主控芯片）","categories":[],"tags":[]},{"title":"ubuntu lvm 扩容","slug":"Linux/ubuntu_lvm_extentions","date":"2016-10-26T00:00:00.000Z","updated":"2022-12-29T07:32:46.154Z","comments":true,"path":"2016/10/26/Linux/ubuntu_lvm_extentions/","link":"","permalink":"http://www.wmyeah.com/2016/10/26/Linux/ubuntu_lvm_extentions/","excerpt":"","text":"1. ubuntu lvm 扩容 2. 内存虚拟盘 2.1. 临时挂载 2.2. 永久挂载 1. ubuntu lvm 扩容123lvextend -l +100%FREE /dev/mapper/ubuntu--vg-ubuntu--lvresize2fs /dev/mapper/ubuntu--vg-ubuntu--lv 2. 内存虚拟盘2.1. 临时挂载1mount -t tmpfs -o size=512G tmpfs /datas/plots_tmp 2.2. 永久挂载123vim /etc/fstabtmpfs /datas/plots_tmp tmpfs defaults,size=512G 0 0","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://www.wmyeah.com/tags/Linux/"}]},{"title":"Windows 一键查看已连接过的WIFI密码","slug":"Others/dev_Other_00","date":"2016-10-26T00:00:00.000Z","updated":"2022-12-29T07:32:46.154Z","comments":true,"path":"2016/10/26/Others/dev_Other_00/","link":"","permalink":"http://www.wmyeah.com/2016/10/26/Others/dev_Other_00/","excerpt":"","text":"目录： 1. 说明: 2. CMD命令 3. PS: 1. 说明: WARNING 请谨慎使用此命令，一切造成的后果请各位自行承担 2. CMD命令1for /f &quot;skip=9 tokens=1,2 delims=:&quot; %i in (&#x27;netsh wlan show profiles&#x27;) do @echo %j | findstr -i -v echo | netsh wlan show profiles %j key=clear 3. PS: 根据网上资料亲测整理，最终解释权归WMYeah所有!","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://www.wmyeah.com/tags/Linux/"}]},{"title":"iOS .Framework SDK开发注意事项","slug":"iOS/iOS_01","date":"2016-10-18T00:00:00.000Z","updated":"2022-12-29T07:32:46.154Z","comments":true,"path":"2016/10/18/iOS/iOS_01/","link":"","permalink":"http://www.wmyeah.com/2016/10/18/iOS/iOS_01/","excerpt":"","text":"目录： 1. 搜索 Library 设置工程模式为 Static Library 2. 注意事项: 3. Run Sripte 内容如下 4. 脚本设置成功后 直接选择Target “Comand + B” 编译就OK 5. PS: 1. 搜索 Library 设置工程模式为 Static Library 2. 注意事项: -Option 目前支持选项 Source.boundle 即同名资源Bundle文件 3. Run Sripte 内容如下123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354# 如果工程名称和Framework的Target名称不一样的话，要自定义FMKNAME 例如: FMK_NAME = &quot;MyFramework&quot;FMK_NAME=$&#123;PROJECT_NAME&#125;# ---Option 打包资源BundleFMK_Source_NAME=$&#123;PROJECT_NAME&#125;&quot;Source&quot;# 设置打包导出目录INSTALL_DIR_SRC=$&#123;SRCROOT&#125;/Libs/$&#123;FMK_NAME&#125;INSTALL_DIR=$&#123;INSTALL_DIR_SRC&#125;/$&#123;FMK_NAME&#125;.framework# 设置打包源文件空间WRK_DIR=buildDEVICE_DIR=$&#123;WRK_DIR&#125;/Release-iphoneos/$&#123;FMK_NAME&#125;.frameworkSIMULATOR_DIR=$&#123;WRK_DIR&#125;/Release-iphonesimulator/$&#123;FMK_NAME&#125;.framework# Bundle文件目录FMK_Source_DIR=$&#123;WRK_DIR&#125;/Release-iphoneos/$&#123;FMK_Source_NAME&#125;.bundle# xcodebuild 命令相关设置# Clean and Building both architectures.xcodebuild -configuration &quot;Release&quot; -target &quot;$&#123;FMK_NAME&#125;&quot; -sdk iphoneos clean buildxcodebuild -configuration &quot;Release&quot; -target &quot;$&#123;FMK_NAME&#125;&quot; -sdk iphonesimulator clean build# 使用xcodebuild 打包Bundlexcodebuild -configuration &quot;Release&quot; -target &quot;$&#123;FMK_Source_NAME&#125;&quot; -sdk iphoneos clean build# 清除并新建INSTALL_DIR目录if [ -d &quot;$&#123;INSTALL_DIR&#125;&quot; ]thenrm -rf &quot;$&#123;INSTALL_DIR&#125;&quot;fimkdir -p &quot;$&#123;INSTALL_DIR&#125;&quot;# 拷贝 .Framework 文件到 INSTALL_DIR目录cp -R &quot;$&#123;DEVICE_DIR&#125;/&quot; &quot;$&#123;INSTALL_DIR&#125;/&quot;# ---Option Bundle拷贝资源文件cp -R &quot;$&#123;FMK_Source_DIR&#125;&quot; &quot;$&#123;INSTALL_DIR&#125;/&quot;# Uses the Lipo Tool to merge both binary files (i386 + armv6/armv7) into one Universal final product.lipo -create &quot;$&#123;DEVICE_DIR&#125;/$&#123;FMK_NAME&#125;&quot; &quot;$&#123;SIMULATOR_DIR&#125;/$&#123;FMK_NAME&#125;&quot; -output &quot;$&#123;INSTALL_DIR&#125;/$&#123;FMK_NAME&#125;&quot;ln -s $&#123;INSTALL_DIR&#125;/$&#123;FMK_Source_NAME&#125;.bundle $&#123;INSTALL_DIR_SRC&#125;/$&#123;FMK_Source_NAME&#125;.bundle# 清理工程rm -r &quot;$&#123;WRK_DIR&#125;&quot;rm -r &quot;$&#123;INSTALL_DIR&#125;/_CodeSignature&quot;rm -r &quot;$&#123;INSTALL_DIR&#125;/Info.plist&quot;rm -r &quot;$&#123;INSTALL_DIR&#125;/Modules&quot;# ---Optionrm -r &quot;$&#123;INSTALL_DIR&#125;/$&#123;FMK_Source_NAME&#125;.bundle/Info.plist&quot;# 打开打包好的工程目录open &quot;$&#123;INSTALL_DIR_SRC&#125;&quot; 4. 脚本设置成功后 直接选择Target “Comand + B” 编译就OK 5. PS: 根据网上资料亲测整理，最终解释权归WMYeah所有! 参考资料: 1、Xcode 6制作动态及静态Framework","categories":[],"tags":[{"name":"iOS","slug":"iOS","permalink":"http://www.wmyeah.com/tags/iOS/"}]},{"title":"制作cocoapods开源库-命令备忘","slug":"iOS/iOS_02","date":"2016-10-18T00:00:00.000Z","updated":"2022-12-29T07:32:46.154Z","comments":true,"path":"2016/10/18/iOS/iOS_02/","link":"","permalink":"http://www.wmyeah.com/2016/10/18/iOS/iOS_02/","excerpt":"","text":"目录： 1. 说明: 2. Git操作 2.1. 将变化提交到暂存区 2.2. 提交并填写相关信息 2.3. 打tag 2.4. 同步tag 3. pod trunk相关 3.1. 注册pod trunk 3.2. 在项目根目录下，创建podspec文件 3.3. 查看注册信息 3.4. 验证Pods库是否正确 3.5. 上传至cocoaPods 4. PS: 1. 说明: 记录常用命令用以备忘 2. Git操作2.1. 将变化提交到暂存区1git add . 2.2. 提交并填写相关信息1git commit -m &quot;release-Version-xxx&quot; 2.3. 打tag1git tag x.x.x 2.4. 同步tag1git push --tags 3. pod trunk相关3.1. 注册pod trunk123456# Description 为描述# xxx@xxx.com 为邮箱# --tag 为标识#--description 自我描述pod trunk register xxx@xxx.com &#x27;--Tag&#x27; --description=&#x27;Description&#x27; 3.2. 在项目根目录下，创建podspec文件12# PodName 为定义开源库名pod spec create PodName 3.3. 查看注册信息1pod trunk me 3.4. 验证Pods库是否正确123456# 验证线上pod spec lint XXX.podspec# 验证本地pod lib lint --allow-warnings--allow-warnings 指忽略警告 3.5. 上传至cocoaPods1pod trunk push --allow-warnings 4. PS: 根据网上资料亲测整理，最终解释权归WMYeah所有!","categories":[],"tags":[{"name":"iOS","slug":"iOS","permalink":"http://www.wmyeah.com/tags/iOS/"}]},{"title":"Ubuntu 14.0.4 phpMyAdmin 报错：\"缺少mcrypt扩展,请检查 PHP 配置\"解决方案","slug":"Linux/dev_Linux_01","date":"2016-01-06T00:00:00.000Z","updated":"2022-12-29T07:32:46.154Z","comments":true,"path":"2016/01/06/Linux/dev_Linux_01/","link":"","permalink":"http://www.wmyeah.com/2016/01/06/Linux/dev_Linux_01/","excerpt":"","text":"目录： 1. mcryp模块安装 2. mcrypt模块加载 2.1. 开启mcrypt模块 2.2. 查看apache2 配置文件 3. 重启apache2 4. PS: 1. mcryp模块安装1sudo apt-get install php5-mcrypt 2. mcrypt模块加载2.1. 开启mcrypt模块1sudo php5enmod mcrypt 2.2. 查看apache2 配置文件 进入目录：”&#x2F;etc&#x2F;php5&#x2F;apache2&#x2F;conf.d&#x2F;“ 和 “&#x2F;etc&#x2F;php5&#x2F;mods-available&#x2F;“ 检查是否有mcrypt.ini文件 3. 重启apache21sudo service apache2 restart 4. PS: 根据网上资料亲测整理，最终解释权归WMYeah所有! 参考资料: 1、缺少 mcrypt 扩展。请检查 PHP 配置。","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://www.wmyeah.com/tags/Linux/"}]},{"title":"Ubuntu 14.0.4 mysql 存储目录迁移","slug":"Linux/dev_Linux_05","date":"2016-01-06T00:00:00.000Z","updated":"2022-12-29T07:32:46.154Z","comments":true,"path":"2016/01/06/Linux/dev_Linux_05/","link":"","permalink":"http://www.wmyeah.com/2016/01/06/Linux/dev_Linux_05/","excerpt":"","text":"目录： 1. 说明: 2. 停止mysql 3. 建立迁移目的地文件夹 4. 修改所属用户及所属用户组为mysql 5. 修改权限 6. 拷贝”&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;*“所有文件 7. 修改mysql的配置文件 8. 修改shell文件 9. 重新启动apparmor和mysql 10. 删除原有文件 (-Option) 11. PS: 1. 说明: parmars -mysqlDir- 新的mysql存储目录 例如：&#x2F;home&#x2F;mysqlData&#x2F; WARNING 注意代码中的引用到的参数 2. 停止mysql1sudo service mysql stop 3. 建立迁移目的地文件夹1sudo mkdir -p -mysqlDir- 4. 修改所属用户及所属用户组为mysql1sudo chown -vR mysql:mysql -mysqlDir- 5. 修改权限1sudo chmod -vR 700 -mysqlDir- 6. 拷贝”&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;*”所有文件1sudo cp -av /var/lib/mysql/* -mysqlDir- 7. 修改mysql的配置文件 sudo vi /etc/mysql/my.cnf 12* 将 datadir=/var/lib/mysql/ 12* 修改为 datadir=-mysqlDir- 12345# 8. 修改shell文件&lt;/h3&gt;* ``` sudo vi /etc/apparmor.d/usr.sbin.mysqld 将 12/var/lib/mysql/ r, /var/lib/mysql/** rwk, 修改为 12-mysqlDir- r, -mysqlDir-** rwk, 9. 重新启动apparmor和mysql12sudo service apparmor reloadsudo service mysql start 10. 删除原有文件 (-Option)1sudo rm -rvf /var/lib/mysql/ 11. PS: 根据网上资料亲测整理，最终解释权归WMYeah所有! 参考资料: 1、ubuntu14.04 下 mysql 存储目录迁移 2、mysql数据库的使用与理解（基于ubuntu14.0.4LTS64位） 2、ubuntu14.04下mysql数据库的默认存放路径并修改","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://www.wmyeah.com/tags/Linux/"}]},{"title":"Ubuntu 14.0.4 安装并配置Gitolite服务器","slug":"Linux/dev_Linux_07","date":"2015-06-09T00:00:00.000Z","updated":"2022-12-29T07:32:46.154Z","comments":true,"path":"2015/06/09/Linux/dev_Linux_07/","link":"","permalink":"http://www.wmyeah.com/2015/06/09/Linux/dev_Linux_07/","excerpt":"","text":"目录： 1. 说明 2. 添加用户并配置git用户HOME目录 3. 将用户添加到SSH服务组 4. 设置Git密码 5. 配置GitGlobal 6. 生成SSHKey 7. 拷贝并重命名 .Pub 公钥 8. clone Git源码库 9. 新建”$HOME&#x2F;bin”文件夹 10. 将git安装到”$HOME&#x2F;bin”目录 11. 初始化gitolite程序 12. clone gitolite管理库”gitolite-admin.git” 13. PS: 1. 说明 parmars -gitHomeDir- git用户HOME目录 例如：&#x2F;home&#x2F;git&#x2F; parmars -USERNAME- &#x2F;&#x2F;用户名 parmars -git_User_Name- &#x2F;&#x2F;用户名 parmars -git_User_Email- &#x2F;&#x2F;Email WARNING 注意代码中的引用到的参数 2. 添加用户并配置git用户HOME目录12sudo adduser --system --shell /bin/bash --home -gitHomeDir- --group gitsudo adduser --system --shell /bin/bash --home /datas/git- --group git 3. 将用户添加到SSH服务组1sudo adduser git ssh 4. 设置Git密码1sudo passwd git 5. 配置GitGlobal12git config --global user.name &quot;-git_User_Name-&quot;git config --global user.email &quot;Email&quot; 6. 生成SSHKey1ssh-keygen -t rsa -C &quot;-git_User_Email-&quot; 连按3此回车结束(-Option 也可以根据需求设置详细密码) 7. 拷贝并重命名 .Pub 公钥1cp .ssh/id_rsa.pub ./-USERNAME-.pub 8. clone Git源码库1git clone git://github.com/sitaramc/gitolite 9. 新建”$HOME&#x2F;bin”文件夹1mkdir -p $HOME/bin 10. 将git安装到”$HOME&#x2F;bin”目录1gitolite/install -to $HOME/bin 11. 初始化gitolite程序1$HOME/bin/gitolite setup -pk YourName.pub 12. clone gitolite管理库”gitolite-admin.git”1git clone git@127.0.0.1:gitolite-admin.git 13. PS: 根据网上资料亲测整理，最终解释权归WMYeah所有! 参考资料: 1、gitolite README.markdown 2、gitolite wiki 2、Ubuntu下安装Git和Gitolite","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://www.wmyeah.com/tags/Linux/"}]},{"title":"在Ubuntu 14.0.4 LTS Apache virtualhost 虚拟主机相关设置(包含https)","slug":"Linux/dev_Linux_03","date":"2015-04-18T00:00:00.000Z","updated":"2022-12-29T07:32:46.154Z","comments":true,"path":"2015/04/18/Linux/dev_Linux_03/","link":"","permalink":"http://www.wmyeah.com/2015/04/18/Linux/dev_Linux_03/","excerpt":"","text":"目录： 1. 说明： 2. 创建存放所有Web项目的相关目录 2.1. web 根目录 2.2. 项目A 根目录 2.3. 项目B 根目录 2.4. 赋予相关目录权限 3. apache2.conf 相关设置 3.1. 备份原有配置文件 3.2. 编辑 apache2.conf 4. 设置 apache 虚拟主机 4.1. 编辑 -Domain_A-.conf 文件 4.1.1. 拷贝样例 4.1.2. 编辑 4.1.2.1. 根据需求设置 4.1.2.2. 设置https支持 (-Option) 4.2. 编辑-Domain_B-.conf文件 5. 启用配置 5.1. 进入 “&#x2F;etc&#x2F;apache2&#x2F;sites-available” 目录 5.2. 禁用系统默认解析文件 “000-default.conf” 5.3. 启用配置好的文件 “-Domain_A-.conf” 6. 开启apache ssl支持 (-Option) 7. 重启Apache2服务 8. 访问站点: 9. PS: 1. 说明： parmars -webDir- 存放所有Web项目的Linux文件系统绝对目录 例如：&#x2F;home&#x2F;webSite parmars -webSubDir_A- web项目A根目录 例如：&#x2F;home&#x2F;webSite&#x2F;webA parmars -webSubDir_B- web项目A根目录 例如：&#x2F;home&#x2F;webSite&#x2F;webB parmars [-Domain_A-] webA域名 例如：a.wmyeah.com parmars [-Domain_B-] webB域名 例如：b.wmyeah.com parmars -SSL_File_Path- SSL文件存放位置 (-Option) 例如：&#x2F;home&#x2F;SSLFiles 2. 创建存放所有Web项目的相关目录2.1. web 根目录1sudo mkdir -p -webDir- 2.2. 项目A 根目录1sudo mkdir -p -webSubDir_A- 2.3. 项目B 根目录1sudo mkdir -p -webSubDir_B- 2.4. 赋予相关目录权限123sudo chown -R $USER:$USER -webDir-sudo chown -R $USER:$USER -webDir_A-sudo chown -R $USER:$USER -webDir_B- 3. apache2.conf 相关设置3.1. 备份原有配置文件```cp /etc/apache2/apache2.conf /etc/apache2/apache2.conf.bak``` 3.2. 编辑 apache2.conf```sudo vi /etc/apache2/apache2.conf``` * 将 12345&lt;Directory /var/www/&gt; Options Indexes FollowSymLinks AllowOverride All Require all granted&lt;/Directory&gt; * 改为 12345&lt;Directory /zx_dev/webSite/&gt; Options Indexes FollowSymLinks AllowOverride All Require all granted&lt;/Directory&gt; 保存退出 4. 设置 apache 虚拟主机4.1. 编辑 -Domain_A-.conf 文件4.1.1. 拷贝样例1sudo cp /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/-Domain_A-.conf 4.1.2. 编辑1sudo vi /etc/apache2/sites-available/-Domain_A-.conf 4.1.2.1. 根据需求设置1234&lt;VirtualHost *:80&gt; // 端口ServerName -Domain_A- // 域名ServerAdmin webmaster@-Domain_A- // 管理员邮箱DocumentRoot -webDir_A- // 项目根目录 4.1.2.2. 设置https支持 (-Option) 在“ &lt;VirtualHost *:80 ”上方添加 “Listen 443” 12Listen 443&lt;VirtualHost *:80&gt; 开启SSL并添加Key文件 1234SSLEngine onSSLCertificateFile -SSL_File_Path-/-Domain_A-.crtSSLCertificateKeyFile -SSL_File_Path-/-Domain_A-.keySSLCACertificateFile -SSL_File_Path-/-Domain_A-_Bundle.crt 4.2. 编辑-Domain_B-.conf文件 请参照4.1 5. 启用配置5.1. 进入 “&#x2F;etc&#x2F;apache2&#x2F;sites-available” 目录 &#96;&#96;&#96; cd &#x2F;etc&#x2F;apache2&#x2F;sites-available&#x2F; 1234## 5.2. 禁用系统默认解析文件 “000-default.conf”* ``` sudo a2dissite 000-default.conf 5.3. 启用配置好的文件 “-Domain_A-.conf” &#96;&#96;&#96; sudo a2ensite -Domain_A-.conf 1234# 6. 开启apache ssl支持 (-Option)* ``` sudo a2enmod ssl 7. 重启Apache2服务 sudo service apache2 restart 8. 访问站点: 在浏览器中输入“https://domain”访问 (ps:domain 为 服务器IP地址或者已指向服务器的域名) 9. PS: 根据网上资料亲测整理，最终解释权归WMYeah所有! 参考资料: 1、LAMP（Apache）环境部署安装SSL安全证书且可HTTPS加密网站 2、linux下的apache部署ssl证书 2、如何在Ubuntu 14.04 上为Apache 2.4 安装SSL支持","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://www.wmyeah.com/tags/Linux/"}]},{"title":"Ubuntu 14.0.4 配置静态IP","slug":"Linux/dev_Linux_04","date":"2015-04-18T00:00:00.000Z","updated":"2022-12-29T07:32:46.154Z","comments":true,"path":"2015/04/18/Linux/dev_Linux_04/","link":"","permalink":"http://www.wmyeah.com/2015/04/18/Linux/dev_Linux_04/","excerpt":"","text":"目录： 1. 参数说明 2. 编辑”&#x2F;etc&#x2F;network&#x2F;interfaces”文件 3. 编辑”&#x2F;etc&#x2F;resolvconf&#x2F;resolv.conf.d&#x2F;base”文件 4. 重启networking服务使其生效： 5. PS: 1. 参数说明 本例以192.168.1.0(255.255.255.0)网段为例 2. 编辑”&#x2F;etc&#x2F;network&#x2F;interfaces”文件 &#96;&#96;&#96; sudo vi &#x2F;etc&#x2F;network&#x2F;interfaces 12* 新增如下内容 auto eth0 iface eth0 inet static address 192.168.1.88 netmask 255.255.255.0 gateway 192.168.1.1 1234# 3. 编辑&quot;/etc/resolvconf/resolv.conf.d/base&quot;文件* ``` sudo vi /etc/resolvconf/resolv.conf.d/base 输入如下内容 12nameserver 192.168.1.1nameserver 8.8.8.8 4. 重启networking服务使其生效：1/etc/init.d/networking restart 5. PS: 根据网上资料亲测整理，最终解释权归WMYeah所有! 参考资料: 1、ubuntu 14.10系统怎么设置静态ip？ 2、Ubuntu Server 12.04(14.04) 静态IP简洁配置","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://www.wmyeah.com/tags/Linux/"}]},{"title":"Ubuntu 14.0.4搭建LAMP+phpmyadmin Web服务器","slug":"Linux/dev_Linux_02","date":"2015-04-08T00:00:00.000Z","updated":"2022-12-29T07:32:46.154Z","comments":true,"path":"2015/04/08/Linux/dev_Linux_02/","link":"","permalink":"http://www.wmyeah.com/2015/04/08/Linux/dev_Linux_02/","excerpt":"","text":"目录： 1. 安装mysql-server、mysql-client 2. 安装apache2 3. 安装php5 php5 libapache2-mod-php5(apache php5支持模块) 4. 安装php5常用模块 5. 安装数据库管理工具 phpMyadmin 6. 重启apache2 7. 访问站点: 8. PS: 1. 安装mysql-server、mysql-client1sudo apt-get install mysql-server mysql-client 2. 安装apache21sudo apt-get install apache2 3. 安装php5 php5 libapache2-mod-php5(apache php5支持模块)1sudo apt-get install php5 libapache2-mod-php5 4. 安装php5常用模块1sudo apt-get install php5-mysql php5-curl php5-gd php5-intl php-pear php5-imagick php5-imap php5-mcrypt php5-memcache php5-ming php5-ps php5-pspell php5-recode php5-snmp php5-sqlite php5-tidy php5-xmlrpc php5-xsl``` 5. 安装数据库管理工具 phpMyadmin1sudo apt-get install phpmyadmin 6. 重启apache21sudo service apache2 restart 7. 访问站点: LocalHost模式: 再浏览器中输入“http://127.0.0.1” 或 “http://localhost” 访问 远程模式: 再浏览器中输入“http://domain”访问 (ps:domain 为 服务器IP地址或者已指向服务器的域名) 8. PS: 根据网上资料亲测整理，最终解释权归WMYeah所有! 参考资料: 1、Linux Ubuntu 14.04安装LAMP（Apache+MySQL+PHP）网站环境 2、Ubuntu Server 14.04 安装 LAMP 2、ubuntu14.04搭建web服务器lamp","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://www.wmyeah.com/tags/Linux/"}]},{"title":"Linux 基操","slug":"Linux/Linux_ntp_01","date":"2015-03-12T10:06:35.000Z","updated":"2022-12-29T07:32:46.154Z","comments":true,"path":"2015/03/12/Linux/Linux_ntp_01/","link":"","permalink":"http://www.wmyeah.com/2015/03/12/Linux/Linux_ntp_01/","excerpt":"","text":"目录： 1. 、国内常用NTP服务器 2. 、使用Let’s Encrypt 申请 泛域名ssl证书 3. PS: 1. 、国内常用NTP服务器 国家授时中心新的NTP服务器地址：1ntp.ntsc.ac.cn 阿里云1ntp.aliyun.com 国内大学123456s1c.time.edu.cn 北京大学 s2m.time.edu.cn 北京大学s1b.time.edu.cn 清华大学s1e.time.edu.cn 清华大学s2a.time.edu.cn 清华大学s2b.time.edu.cn 清华大学 国外授时服务器1234567891011121314#苹果提供的授时服务器 time1.apple.comtime2.apple.comtime3.apple.comtime4.apple.comtime5.apple.comtime6.apple.comtime7.apple.com#Google提供的授时服务器 time1.google.comtime2.google.comtime3.google.comtime4.google.com 2. 、使用Let’s Encrypt 申请 泛域名ssl证书 命令（Ubuntu serve 18.04.4）1certbot certonly --preferred-challenges dns --manual -d *.example.com --server https://acme-v02.api.letsencrypt.org/directory 需要dns验证 自己操作增加txt 验证即可 默认在 &#x2F;etc&#x2F;letsencrypt&#x2F;live&#x2F; 目录下 为了和阿里云配置保持同步做了两个注记命令 阿里云为 pem 和 key 结尾 这里都是pem1234cp /etc/letsencrypt/live/$mydomain.com/fullchain.pem ~/$mydomain.com_fullchain.pemcp /etc/letsencrypt/live/$mydomain.com/privkey.pem ~/$mydomain.com_fullchain_privkey.pem 3. PS: 根据网上资料亲测整理，最终解释权归WMYeah所有!","categories":[],"tags":[]},{"title":"Ubuntu 14.0.4 Linux SVN Server搭建","slug":"Linux/dev_Linux_06","date":"2015-02-01T00:00:00.000Z","updated":"2022-12-29T07:32:46.154Z","comments":true,"path":"2015/02/01/Linux/dev_Linux_06/","link":"","permalink":"http://www.wmyeah.com/2015/02/01/Linux/dev_Linux_06/","excerpt":"","text":"目录： 1. 说明: 2. 安装subversion 3. 创建版本库 4. 配置”svnserve.conf”版本库信息 5. 配置”passwd”用户信息 6. 配置”authz”用户授权 7. 设置开机自启动SVN服务 8. PS: 1. 说明: parmars -svnDir- SVN项目统一存放路径 例如：&#x2F;home&#x2F;svnProjects&#x2F; parmars -svnDir_Project01- 暂命名为“Project01”的SVN库地址 例如：&#x2F;home&#x2F;svnProjects&#x2F;svnP1&#x2F; WARNING 注意代码中的引用到的参数 2. 安装subversion1sudo apt-get install subversion 3. 创建版本库 &#96;&#96;&#96; sudo mkdir -p -svnDir_Project01- 123* ``` sudo svnadmin create -svnDir_Project01- 4. 配置”svnserve.conf”版本库信息 sudo vi -svnDir_Project01-/conf/svnserve.conf 12* 将以下参数注释掉 [general] anon-access = none #匿名访问权限，默认read，none为不允许访问 auth-access = write #认证用户权限 password-db = passwd #用户信息，默认在版本库/conf下面,如需更改请填写文件绝对路径 authz-db = authz 1234# 5. 配置&quot;passwd&quot;用户信息* ``` sudo vi -svnDir_Project01-/conf/passwd 按如下格式添加用户 1234[users]zhangsan = 123lisi = 123wangwu = 123 6. 配置”authz”用户授权 &#96;&#96;&#96; sudo vi -svnDir_Project01-&#x2F;conf&#x2F;authz 12* 按如下格式修改或添加用户授权信息 [groups] #定义组的用户 manager &#x3D; zhangsan core_dev &#x3D; lisi,wangwu #以此版本库根目录为基准下发权限物理位置为”-svnDir_Project01-“ [&#x2F;] #manager组用户对根目录有读写权限 @manager &#x3D; rw [&#x2F;dev] #core_dev对dev子目录为读写权限 @core_dev &#x3D; rw 12345# 7. 设置开机自启动SVN服务* 进入&quot;/etc/init.d/&quot;目录 cd &#x2F;etc&#x2F;init.d&#x2F; 123* ``` sudo vi runSVN .sh 输入如下内容 此处为存放所有SVN版本库的目录的绝对地址 12#!/bin/bashsvnserve -d -r -svnDir- 保存退出并修改权限 1sudo chmod 777 runSVN.sh 1sudo update-rc.d runSVN.sh defaults 8. PS: 根据网上资料亲测整理，最终解释权归WMYeah所有! 参考资料: 1、High-Speed Tutorial Appendix A. Subversion Quick-Start Guide 2、ubuntu 14.04 下搭建SVN服务器 svn:&#x2F;&#x2F; 2、Ubuntu 14.0.4系统下SVN的安装与配置","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://www.wmyeah.com/tags/Linux/"}]}],"categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://www.wmyeah.com/tags/Linux/"},{"name":"iOS","slug":"iOS","permalink":"http://www.wmyeah.com/tags/iOS/"}]}