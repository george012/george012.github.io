[{"content":"目录：\n1. 在Ubuntu 20.04 LTS安装最新版本Redis 2. PS: 1. 在Ubuntu 20.04 LTS安装最新版本Redis 添加redis源 add-apt-repository ppa:redislabs/redis apt update \u0026amp;\u0026amp; apt install redis systemctl enable redis-server.service 2. PS: 此操作基于（root）权限操作，如用普通用户可在命令行前加“sudo” 根据网上资料亲测整理，最终解释权归WMYeah所有! ","permalink":"https://www.wmyeah.com/blog/redis_01/","summary":"","title":"Redis"},{"content":"1. msys2 安装 mingw64后添加右键当前目录 msys 2. PS: 此操作基于（root）权限操作，如用普通用户可在命令行前加“sudo” 根据网上资料亲测整理，最终解释权归WMYeah所有! ","permalink":"https://www.wmyeah.com/blog/windows_msys2_01/","summary":"","title":"Windows msys2 环境集锦"},{"content":"目录：\n1. 在Windows安装 1.1. 在Windows下WSL2 Ubuntu20.0.4 2. 在Linux安装 2.1. 在Ubuntu中 3. PS: 1. 在Windows安装 1.1. 在Windows下WSL2 Ubuntu20.0.4 同Linux Ubuntu安装方式\u0026mdash;- 2. 在Linux安装 2.1. 在Ubuntu中 ``` sudo add-apt-repository ppa:longsleep/golang-backports sudo apt-get install golang-go\n* 如果要安装指定版本 ``` sudo apt-get install golang-1.17-go ``` * 如果add-apt-repository不存在，通过以下命令安装进行按照： ``` sudo apt-get install software-properties-common sudo apt-get update ``` # 3. PS: * 此操作基于（root）权限操作，如用普通用户可在命令行前加“sudo” * 根据网上资料亲测整理，最终解释权归[WMYeah][1]所有! ------ [1]:http://www.wmyeah.com ","permalink":"https://www.wmyeah.com/blog/golang_install_01/","summary":"","title":"Golang--安装篇"},{"content":"关于我 ","permalink":"https://www.wmyeah.com/about/","summary":"","title":"About"},{"content":" 使用 MSYS2 UCRT64 进行操作 // 安装 make pacman -S make 安装依赖 m4 pacman -S m4 $GMP_PATH GMP 解压后的目录 例如 [D:\\Download\\gmp-6.2.1] // 如果 mingw64 的目录是 [C:\\Program Files\\mingw64] cd /d/Download/gmp-6.2.1 ./configure --prefix=/c/mingw64 --enable-cxx --host=x86_64-w64-mingw32 --target=x86_64-w64-mingw32 --enable-shared --disable-static ","permalink":"https://www.wmyeah.com/blog/gmp/","summary":"","title":"GMP"},{"content":" 卸载旧版 Docker 安装相关工具包 安装Docker源 阿里云 更新 yum 缓存并且安装 启动 Docker 并且设置开机自启 查看 Docker 版本 PS: 卸载旧版 Docker yum remove docker docker-common container-selinux docker-selinux docker-engine 安装相关工具包 yum install -y yum-utils 安装Docker源 # 官方 yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo 阿里云 yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo 更新 yum 缓存并且安装 yum makecache fast \u0026amp;\u0026amp; yum install docker-ce -y 启动 Docker 并且设置开机自启 systemctl start docker \u0026amp;\u0026amp; systemctl enable docker 查看 Docker 版本 docker -v PS: 根据网上资料亲测整理，最终解释权归[WMYeah][1]所有!\n参考资料:\n[1]]:http://www.wmyeah.com\n","permalink":"https://www.wmyeah.com/blog/docker_01/","summary":"","title":"Centos7.x安装最新版Docker"},{"content":"目录：\n1. 开启systemctl服务 2. PS: 1. 开启systemctl服务 在升级为wsl2最新版后执行\necho -e \u0026#34;[boot]\\nsystemd=true\u0026#34; | sudo tee -a /etc/wsl.conf 安装完后再PowerShell中重启WSL2\n# 重启 wsl --shutdown 在WSL Linux系统中执行下面命令，查看systemctl是否启动\nps --no-headers -o comm 1 2. PS: 此操作基于（root）权限操作，如用普通用户可在命令行前加“sudo” 根据网上资料亲测整理，最终解释权归WMYeah所有! ","permalink":"https://www.wmyeah.com/blog/windows_wsl_01/","summary":"","title":"Windows WSL2 Ubuntu20.04开启systemctl服务"},{"content":"To add images you can use the following syntax:\n![This where you put the alt information](/uploads/self.webp) To add title, use the following syntax (\u0026lt;figure\u0026gt; element will be generated with \u0026lt;figcaption\u0026gt;):\n![This where you put the alt information](/uploads/self.webp \u0026#34;This is where you put the title\u0026#34;) This is where you put the title Or from external sources:\n![This is where you put the alt](https://images.unsplash.com/photo-1520085601670-ee14aa5fa3e8 \u0026#34;This is the image title\u0026#34;) This is the image title ","permalink":"https://www.wmyeah.com/blog/images/","summary":"Guide to adding images in Piko theme","title":"Adding Images"},{"content":"目录：\n1. 部分常用开发工具安装 2. 安装epel源 3. 更换yum源为阿里云yum源（国内提速） 4. 关闭防火墙 5. 关闭selinux 6. 重启系统 使其生效 7. PS: 1. 部分常用开发工具安装 yum -y install nano vim wget curl net-tools lsof unzip unzip 2. 安装epel源 yum install epel-release 3. 更换yum源为阿里云yum源（国内提速） 备份yum源\nmv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak 下载阿里云yum 源\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-8.repo 确保/etc/yum.repos.d/CentOS-Media.repo 文件中 enabled=0\nvim /etc/yum.repos.d/CentOS-Media.repo 一步到位更新\nyum clean all \u0026amp;\u0026amp; yum makecache \u0026amp;\u0026amp; yum update 4. 关闭防火墙 查看\nsystemctl status firewalld 关闭\nsystemctl stop firewalld 关闭开机自启\nsystemctl disable firewalld 5. 关闭selinux 查看\ngetenforce 永久关闭\nvim /etc/selinux/config 将 SELINUX=enforcing 改成 SELINUX=disabled 6. 重启系统 使其生效 reboot 7. PS: 根据网上资料亲测整理，最终解释权归WMYeah所有! 参考资料Centos8（最小化安装）全新安装Python3.8+pip的方法教程 ","permalink":"https://www.wmyeah.com/blog/dev_linux_centos8_00/","summary":"","title":"CentOS8.X 安装后调优"},{"content":"目录：\n1. 安装依赖 2. 安装Python3.8.2 2.1. 安装并配置python 2.2. 更换pip源加速pip下载速度（此处使用阿里云） 2.3. 更新pip 3. 番外 virtualenv 和 virtualenvwrapper 的安装 3.1. virtualenv 3.2. virtualenvwrapper 4. PS: 1. 安装依赖 注意一定要先安装依赖包，依赖包顺序如下（亲测、、、顺序搞错导 会导致 pip某些包无法安装） yum install wget yum install setup yum install perl yum install openssl-devel yum install zlib-devel yum groupinstall \u0026#34;Development tools\u0026#34; yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel yum install gdbm-devel db4-devel libpcap-devel xz-devel yum install zlib1g-dev yum install zlib* yum install libffi-devel yum install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel 2. 安装Python3.8.2 2.1. 安装并配置python wget https://www.python.org/ftp/python/3.8.2/Python-3.8.2.tar.xz tar -xvJf Python-3.8.2.tar.xz mkdir /usr/local/python3 cd Python-3.8.2 ./configure --prefix=/usr/local/python3 --enable-optimizations --with-ssl make \u0026amp;\u0026amp; make install ln -s /usr/local/python3/bin/python3 /usr/bin/python3 ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3 ln -s /usr/bin/python3 /usr/bin/python ln -s /usr/bin/pip3 /usr/bin/pip 2.2. 更换pip源加速pip下载速度（此处使用阿里云） 编辑命令\nmkdir -p ~/.pip vim ~/.pip/pip.conf 文件内容\n[global] index-url = http://mirrors.aliyun.com/pypi/simple [install] trusted-host=mirrors.aliyun.com 2.3. 更新pip pip3 install --upgrade pip 3. 番外 virtualenv 和 virtualenvwrapper 的安装 3.1. virtualenv pip install virtualenv 3.2. virtualenvwrapper pip install virtualenvwrapper 4. PS: 根据网上资料亲测整理，最终解释权归WMYeah所有! 参考资料Centos8（最小化安装）全新安装Python3.8+pip的方法教程 ","permalink":"https://www.wmyeah.com/blog/dev_linux_centos8_python_01/","summary":"","title":"CentOS8.X 安装Python3.8.x"},{"content":"目录：\n1. 修改apt源为阿里云 1.1. 备份系统自带源 1.2. 修改源为阿里云 1.3. 更新apt 1.4. 关闭SNAP自动更新 关闭防火墙 2. PS: 1. 修改apt源为阿里云 1.1. 备份系统自带源 mv /etc/apt/sources.list /etc/apt/sources.list.bak 1.2. 修改源为阿里云 编辑apt源文件\nvim /etc/apt/sources.list apt源文件 /etc/apt/sources.list 内容\ndeb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse 1.3. 更新apt apt update apt upgrade 1.4. 关闭SNAP自动更新 systemctl disable {snapd,snapd.socket,snapd.refresh.timer} systemctl stop {snapd,snapd.socket,snapd.refresh.timer} vim /etc/apt/apt.conf.d/20auto-upgrades # 将1 改为0 关闭防火墙 systemctl disable ufw\n2. PS: 此操作基于（root）权限操作，如用普通用户可在命令行前加“sudo” 根据网上资料亲测整理，最终解释权归WMYeah所有! ","permalink":"https://www.wmyeah.com/blog/dev_linux_ubuntu20.04_01/","summary":"","title":"R730xd Ubuntu server 20.04 安装并调优"},{"content":"目录：\n1. KVM安装 1.1. 检查是否支持 1.2. 安装 cpu-checker 检查工具并检查机器是否支持 kvm 1.3. 开始安装 2. PS: 1. KVM安装 1.1. 检查是否支持 egrep -c \u0026#39;(vmx|svm)\u0026#39; /proc/cpuinfo 1.2. 安装 cpu-checker 检查工具并检查机器是否支持 kvm 安装cpu-checker apt install cpu-checker 检查 kvm-ok 1.3. 开始安装 更新apt源并且安装kvm及相关组件\napt update \u0026amp;\u0026amp; apt install qemu qemu-kvm libvirt-bin bridge-utils virt-manager 设置网络桥接 共4网卡，2网卡给虚拟机，2网卡留给物理机\nnetwork: ethernets: eno1: addresses: - 192.168.0.6/24 gateway4: 192.168.0.1 nameservers: addresses: - 192.168.0.1 eno2: addresses: - 192.168.0.5/24 gateway4: 192.168.0.1 nameservers: addresses: - 192.168.0.1 eno3: dhcp4: no dhcp6: no eno4: dhcp4: no dhcp6: no bridges: br0: interfaces: [eno3] dhcp4: no addresses: [192.168.0.4/24] gateway4: 192.168.0.1 nameservers: addresses: [192.168.0.1] br1: interfaces: [eno4] dhcp4: no addresses: [192.168.0.3/24] gateway4: 192.168.0.1 nameservers: addresses: [192.168.0.1] version: 2 更新配置 及 查看\n# 更新 netplan apply # 查看 networkctl status -a 2. PS: 此操作基于（root）权限操作，如用普通用户可在命令行前加“sudo” 根据网上资料亲测整理，最终解释权归WMYeah所有! ","permalink":"https://www.wmyeah.com/blog/kvm_ubuntu_01-copy/","summary":"","title":"Ubuntu Server 18.0.4.4 KVM 虚拟化搭建"},{"content":"目录：\n1. Crontab操作 2. 在需要更新的git项目文件夹内编辑git_pull.sh 3. PS: 1. Crontab操作 1-1、编辑crontab\ncrontab -e 1-2、将以下代码放入脚本\n# 脚本目录、日志目录 根据自己实际情况设定 */2 * * * * /home/git_test/git_pull.sh \u0026gt;\u0026gt; /home/logs/git_pull.log 2\u0026gt;\u0026amp;1 \u0026amp; 2. 在需要更新的git项目文件夹内编辑git_pull.sh 2-1、编辑\nvim git_pull.sh 2-2、内容\n#!/bin/bash cu_sp_path=/home/git_test cd ${cu_sp_path} \u0026amp;\u0026amp; git pull echo \u0026#34;[\u0026#34;${cu_sp_path}\u0026#34;] update with [\u0026#34;`date`\u0026#34;]\u0026#34; 2-3、赋予权限\nchmod -R 777 git_pull.sh 3. PS: 根据网上资料亲测整理，最终解释权归WMYeah所有! ","permalink":"https://www.wmyeah.com/blog/git_auto-gitpull/","summary":"","title":"利用Crontab 定时任务自动git pull更新代码"},{"content":"目录：\n1. Centos 篇 1.1. virtualenvwrapper 操作Python 虚拟环境virtualenv 1.1.1. 指定版本创建 1.1.2. 删除pyenv 1.1.3. 切换 py-env环境 1.1.4. 离开当前虚拟环境 2. PS: 1. Centos 篇 1.1. virtualenvwrapper 操作Python 虚拟环境virtualenv 1.1.1. 指定版本创建 virtualenv -p ${python-path} ${virtualenv-name} # ${python-path} 欲指定python 版本路径 # ${virtualenv-name} 欲指定 py-env 名称 1.1.2. 删除pyenv rmvirtualenv ${virtualenv-name} # ${virtualenv-name} py-env 名称 1.1.3. 切换 py-env环境 workon ${virtualenv-name} # ${virtualenv-name} py-env 名称 1.1.4. 离开当前虚拟环境 deactivate 2. PS: 根据网上资料亲测整理，最终解释权归WMYeah所有! ","permalink":"https://www.wmyeah.com/blog/dev_python_002/","summary":"","title":"linux python 常用命令"},{"content":"目录：\n1. 说明: 2. python BeautifulSoup怎么获取无标签文本 3. 时间函数处理 4. 关于open()的mode参数： 5. PS: 1. 说明: 常用命令集锦 2. python BeautifulSoup怎么获取无标签文本 get_name = soup_data.find_all(\u0026#39;div\u0026#39;, attrs={\u0026#39;class\u0026#39;: \u0026#39;inf-get_name\u0026#39;}) get_name = BeautifulSoup(str(get_name), \u0026#39;html.parser\u0026#39;).get_text().replace(\u0026#34;\\n\u0026#34;,\u0026#34;\u0026#34;).replace(\u0026#34; \u0026#34;,\u0026#34;\u0026#34;).replace(\u0026#34;[\u0026#34;,\u0026#34;\u0026#34;).replace(\u0026#34;]\u0026#34;,\u0026#34;\u0026#34;) 3. 时间函数处理 # -*- coding:utf-8 -*- import time #当前时间 print time.time() #时间戳形式 print time.localtime(time.time()) #简单可读形式 print time.asctime( time.localtime(time.time()) ) # 格式化成2015-02-11 10:45:39形式 print time.strftime(\u0026#34;%Y-%m-%d %H:%M:%S\u0026#34;, time.localtime()) # 格式化成Sat Mar 28 22:24:24 2016形式 print time.strftime(\u0026#34;%a %b %d %H:%M:%S %Y\u0026#34;, time.localtime()) # 将格式字符串转换为时间戳 a = \u0026#34;Sat Mar 28 22:24:24 2016\u0026#34; print time.mktime(time.strptime(a,\u0026#34;%a %b %d %H:%M:%S %Y\u0026#34;)) 4. 关于open()的mode参数： \u0026#39;r\u0026#39;：读 \u0026#39;w\u0026#39;：写 \u0026#39;a\u0026#39;：追加 \u0026#39;r+\u0026#39; == r+w（可读可写，文件若不存在就报错(IOError)） \u0026#39;w+\u0026#39; == w+r（可读可写，文件若不存在就创建） \u0026#39;a+\u0026#39; ==a+r（可追加可写，文件若不存在就创建） 对应的，如果是二进制文件，就都加一个b就好啦： \u0026#39;rb\u0026#39;　\u0026#39;wb\u0026#39;　\u0026#39;ab\u0026#39;　\u0026#39;rb+\u0026#39;　\u0026#39;wb+\u0026#39;　\u0026#39;ab+\u0026#39; 5. PS: 根据网上资料亲测整理，最终解释权归WMYeah所有!\n参考资料:\n1、gitolite README.markdown 2、gitolite wiki 2、Ubuntu下安装Git和Gitolite ","permalink":"https://www.wmyeah.com/blog/py_sprider_01/","summary":"","title":"Python 爬虫常用命令集锦"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code Code Blocks Code block with backticks \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Gist List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format. H2O Xn + Yn = Zn Press CTRL+ALT+Delete to end the session. Most salamanders are nocturnal, and hunt for insects, worms, and other small creatures. The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://www.wmyeah.com/blog/markdown-syntax/","summary":"Sample article showcasing basic Markdown syntax and formatting for HTML elements.","title":"Markdown Syntax Guide"},{"content":"Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\nYouTube Privacy Enhanced Shortcode Twitter Simple Shortcode When dealing with strings and javascript variables, template literals help in writing cleaner code.#webdevelopment #programming pic.twitter.com/Vr1TBDoDFe\n\u0026mdash; Heksagon (@Heksagonnet) January 28, 2022 Vimeo Simple Shortcode ","permalink":"https://www.wmyeah.com/blog/rich-content/","summary":"A brief description of Hugo Shortcodes","title":"Rich Content"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nTo enable KaTex globally set the parameter math: true in a project\u0026rsquo;s configuration (config.yml) To enable KaTex on a per page basis include the parameter math: true in content files Note: Use the online reference of Supported TeX Functions\nExamples Inline math: \\(\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…\\) Block math:\n$$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n","permalink":"https://www.wmyeah.com/blog/math-typesetting/","summary":"A brief guide to setup KaTeX","title":"Math Typesetting"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 🙈 🙉 🙉 🙊 🙊\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n.emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; } \u0026lt;style\u0026gt; .emojify { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; font-size: 2rem; vertical-align: middle; } @media screen and (max-width:650px) { .nowrap { display: block; margin: 25px 0; } } \u0026lt;/style\u0026gt; ","permalink":"https://www.wmyeah.com/blog/emoji-support/","summary":"Guide to emoji usage in Hugo","title":"Emoji Support"},{"content":"目录：\n1. 环境准备 1.1. Python 1.2. Django2 1.3. Xadmin 1.4. 设置 1.5. 时区及本地显示 1.6. 依赖文件处理 1.7. 修改本版本Bug 2. 部署（CentOS7） 3. PS: 1. 环境准备 1.1. Python 此处使用Python3.7 1.2. Django2 本文使用Django2.1.3 1.3. Xadmin Git远程源码安装（截止本文最新版本为2.0.1）\npip3 install git+git://github.com/sshwsfc/xadmin.git@django2 卸载 xadmin并改用本地安装(主要是为了保留依赖环境)\npip3 uninstall xadmin 将自行下载的Xadmin拖入新建工程根目录\n新建apps（存放主App）\n新建extra_apps目录（存放 第三方App）\n将xamdin 目录从根目录下拖拽到extra_apps目录下（去掉下面的勾选）\n选中《extra_apps》目录 → 右键 → Mark Directory as → Sources Root\n注册 App 添加 xadmin、reversion\nINSTALLED_APPS = [ \u0026#39;django.contrib.admin\u0026#39;, \u0026#39;django.contrib.auth\u0026#39;, \u0026#39;django.contrib.contenttypes\u0026#39;, \u0026#39;django.contrib.sessions\u0026#39;, \u0026#39;django.contrib.messages\u0026#39;, \u0026#39;django.contrib.staticfiles\u0026#39;, \u0026#39;xadmin\u0026#39;, \u0026#39;reversion\u0026#39; ] 说明\n1、以下设置可直接运行Xadmin自身进行测试 2、主要是尽量不动第三方App的情况下自主开发自有管理系统,所以只需要依赖环境 3、保留xadmin本地文件主要是为了更正xadmin中的bug，并且可以和其他小伙伴一起享用同一套代码 4、所以本人将不会 对‘Xadmin’进行注册，而是注册依赖于Xadmin的自建App 1.4. 设置 使用PyCharm自带Terminal在工程根目录下进行操作\n更新\n./manage.py makemigrations 同步库表结构\n./manage.py migrate 创建超级管理员\n./manage.py createsuperuser 1.5. 时区及本地显示 在settings.py中修改 LANGUAGE_CODE = \u0026#39;zh-hans\u0026#39; TIME_ZONE = \u0026#39;Asia/Shanghai\u0026#39; USE_I18N = True USE_L10N = True USE_TZ = False 1.6. 依赖文件处理 # 依赖文件生成 pip freeze \u0026gt; requirements.txt # 依赖文件安装 pip install -r requirement.txt 1.7. 修改本版本Bug ./xadmin/views/dashboard.py 第36行进行修改 * 将如下代码 def render(self, name, value, attrs=None): * 修改为 def render(self, name, value, attrs=None, renderer=None): 2. 部署（CentOS7） 安装 virtualenv\npip3 install virtualenv 建立软链接\nln -s /usr/local/python3/bin/virtualenv /usr/bin/virtualenv 创建python_web虚拟环境\nvirtualenv --python=/usr/bin/python3 python_web 进入{python_web/bin}目录，启动虚拟环境\nsource activate 在虚拟环境中使用pip3安django和uwsgi\npip3 install django pip3 install uwsgi ln -s /usr/local/python3/bin/uwsgi /usr/bin/uwsgi\t#建立uwsgi软链接以方便使用 启动项目(进入项目目录中)\npython3 manage.py runserver 在项目根目录下配置UWSGI\n\u0026lt;uwsgi\u0026gt; \u0026lt;socket\u0026gt;127.0.0.1:8180\u0026lt;/socket\u0026gt; \u0026lt;!-- 内部端口，自定义 --\u0026gt; \u0026lt;chdir\u0026gt;/home/mysite/\u0026lt;/chdir\u0026gt; \u0026lt;!-- 项目路径 --\u0026gt; \u0026lt;module\u0026gt;mysite.wsgi\u0026lt;/module\u0026gt; \u0026lt;!-- mysite为wsgi.py所在目录名--\u0026gt; \u0026lt;processes\u0026gt;1\u0026lt;/processes\u0026gt; \u0026lt;!-- 进程数 --\u0026gt; \u0026lt;daemonize\u0026gt;/home/logs/mysite.uwsgi.log\u0026lt;/daemonize\u0026gt; \u0026lt;!-- 日志文件 --\u0026gt; \u0026lt;/uwsgi\u0026gt; 生成requirements.txt文件\npip freeze \u0026gt; requirements.txt 安装requirements.txt依赖\npip install -r requirements.txt 3. PS: 根据网上资料亲测整理，最终解释权归WMYeah所有! ","permalink":"https://www.wmyeah.com/blog/dev_python_001/","summary":"","title":"Mac Pyhton3.7+Django2+Xadmin"},{"content":"目录：\n1. 更新yum源 2. 安装redis-rpm源 3. 安装Redis 4. 开机自启Redis 5. 设置redis.conf 6. PS: 1. 更新yum源 yum update 2. 安装redis-rpm源 yum install http://rpms.famillecollet.com/enterprise/remi-release-7.rpm 3. 安装Redis yum --enablerepo=remi install redis 4. 开机自启Redis systemctl enable redis 5. 设置redis.conf bind 127.0.0.1 改为 bind 0.0.0.0(可选) vim /etc/redis.conf 6. PS: 根据网上资料亲测整理，最终解释权归WMYeah所有! 参考资料: ","permalink":"https://www.wmyeah.com/blog/dev_linux_redis_01/","summary":"","title":"CentOS7.X yum方式安装最新版本Redis"},{"content":" 1. 编辑源 2. 源内容 3. 添加nginx 公钥 4. 更新并安装 5. PS: 1. 编辑源 vim /etc/apt/sources.list.d/nginx.list 2. 源内容 deb [arch=amd64] http://nginx.org/packages/mainline/ubuntu/ bionic nginx deb-src http://nginx.org/packages/mainline/ubuntu/ bionic nginx 3. 添加nginx 公钥 下载nginx 公钥 wget http://nginx.org/keys/nginx_signing.key 添加 apt-key add nginx_signing.key 4. 更新并安装 apt update apt install nginx 5. PS: 根据网上资料亲测整理，最终解释权归WMYeah所有! ","permalink":"https://www.wmyeah.com/blog/dev_linux_ubuntu18.04_nginx_01/","summary":"","title":"Ubuntu 18.04 安装最新版本 Nginx"},{"content":"目录：\n1. 更新Yum源 2. 获取最新的zookeeper Tar包 3. 安装JDK（官网下载 此处选择的是 rpm包安装） 4. 设置开机自启 5. PS: 1. 更新Yum源 yum update 2. 获取最新的zookeeper Tar包 wget http://mirrors.hust.edu.cn/apache/zookeeper/zookeeper-3.4.13/zookeeper-3.4.13.tar.gz # 解压 tar -zxvf zookeeper-3.4.13.tar.gz 3. 安装JDK（官网下载 此处选择的是 rpm包安装） rpm包主要是为了自动配置环境变量 rpm -ivh jdk-8u181-linux-x64.rpm 4. 设置开机自启 遵循系统的权限管理模式 所以 参照 系统ngix.server 服务编写 vim /usr/lib/systemd/system/zookeeper.service 内容 [Unit] Description=zookeeper After=syslog.target network.target [Service] Type=forking Environment=ZOO_LOG_DIR=/home/zookeeper/log //这里必须填写绝对路径 ExecStart=/zookeeper安装目录/bin/zkServer.sh start ExecStop=/zookeeper安装目录/zoo/bin/zkServer.sh stop Restart=always [Install] WantedBy=multi-user.target 软连接 ln -s /usr/lib/systemd/system/zookeeper.service /etc/systemd/system/zookeeper.service 5. PS: 根据网上资料亲测整理，最终解释权归WMYeah所有! 参考资料: 1、Centos7以普通用户启动zookeeper并加入开机自启动服务 ","permalink":"https://www.wmyeah.com/blog/dev_linux_zoo_01/","summary":"","title":"CentOS7.4 zookeeper单机模式安装，并设置开机自启"},{"content":"目录：\n1. 说明: 2. 将变化提交到暂存区 3. PS: 1. 说明: CocoaPods 使用过程中得问题记录 2. 将变化提交到暂存区 Q: gem install cocoapods ERROR: While executing gem \u0026hellip; (Gem::FilePermissionError) A: 改用如下命令 sudo gem install -n /usr/local/bin cocoapods 3. PS: 根据网上资料亲测整理，最终解释权归[WMYeah][1]所有! [1]]:http://www.wmyeah.com\n","permalink":"https://www.wmyeah.com/blog/ios_03/","summary":"","title":"CocoaPods使用问题汇总"},{"content":"目录：\n1. Shell脚本示例 2. 将写好的xxPlugin 放入/etc/init.d目录内 3. PS: 1. Shell脚本示例 #!/bin/bash #chkconfig: 2345 99 99 #description:xxPlugin # *jar 为要执行的jar包所在绝对路径 # log_file 为转储运行日志绝对路径 # 前三行必写 description:为脚本描述建议20字符以内 nohup java -jar *.jar \u0026gt;log_file \u0026amp; 2. 将写好的xxPlugin 放入/etc/init.d目录内 运行如下命令 # 添加自启服务 chkconfig --add zjbjPlugin # 查看自启服务 chkconfig --list # 如需删除请按如下命令执行 chkconfig --del zjbjPlugin 3. PS: 根据网上资料亲测整理，最终解释权归WMYeah所有! ","permalink":"https://www.wmyeah.com/blog/dev_linux_centos6.9_01/","summary":"","title":"CentOS6.9 后台自制shell循环任务+nohup运行SrpingBoot Jar包"},{"content":"目录：\n1. 说明： 2. 安装php、php-fpm 3. Nginx 4. Mysql 5. PS: 1. 说明： 基于 Centos7.3 php5.6 mysql5.6 nginx1.12.1\n2. 安装php、php-fpm # 更新yum yum install epel-release rpm -ivh http://rpms.famillecollet.com/enterprise/remi-release-7.rpm # 1、安装php yum install --enablerepo=remi --enablerepo=remi-php56 php php-opcache php-devel php-mbstring php-mcrypt php-mysqlnd php-phpunit-PHPUnit php-pecl-xdebug php-gd php-pecl-xhprof # Centos8 yum install http://rpms.remirepo.net/enterprise/remi-release-8.rpm yum install --enablerepo=remi --enablerepo=remi-safe php56 php56-php-opcache php-devel php56-php-mbstring php56-php-mcrypt php56-php-mysqlnd php-phpunit-PHPUnit php56-php-pecl-xdebug php56-php-pecl-xhprof apt install php5.6 php5.6-mcrypt php5.6-mbstring php5.6-curl php5.6-cli php5.6-mysql php5.6-gd php5.6-xml php5.6-fpm # 2、安装 php-fpm yum install --enablerepo=remi --enablerepo=remi-php56 php-fpm or 【yum install php-fpm】 # 3、启动 php-fpm systemctl start php-fpm # 4、开机自启 php-fpm systemctl enable php-fpm 3. Nginx # 1、更新Yum源 yum update # 2、获取最新的Nginx RPM包 rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm # 3、安装Nginx yum install nginx # 4、设置开机自启 systemctl enable nginx 4. Mysql # 1、编辑yum源 vim /etc/yum.repos.d/mysql-community.repo [mysql56-community] name=MySQL 5.6 Community Server baseurl=http://repo.mysql.com/yum/mysql-5.6-community/el/7/$basearch/ enabled=1 gpgcheck=1 gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql # 2、安装 yum install mysql-community-server mysql-community-devel mysql-community-client # 3、开机自启 systemctl enable mysqld 5. PS: 根据网上资料亲测整理，最终解释权归WMYeah所有! ","permalink":"https://www.wmyeah.com/blog/dev_linux_lnmp_01/","summary":"","title":"CentOS7.X 搭建LNMP平台(Yum方式)"},{"content":"目录：\n1. 更新Yum源 2. 获取最新的Nginx RPM包 3. 安装Nginx 4. 设置开机自启 5. PS: 1. 更新Yum源 yum update 2. 获取最新的Nginx RPM包 rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm 3. 安装Nginx yum install nginx 4. 设置开机自启 systemctl enable nginx 5. PS: 根据网上资料亲测整理，最终解释权归WMYeah所有! 参考资料: 1、nginx: Linux packages ","permalink":"https://www.wmyeah.com/blog/dev_linux_nginx_01/","summary":"","title":"CentOS7.3Yum方式安装Nginx"},{"content":"目录：\n1. 申请阿里云免费SSL证书 2. 转换证书 3. 编辑“jetty-ssl.xml”文件 4. 配置\u0026quot;jetty-https.xml \u0026ldquo; 5. 配置Jetty启动文件 6. PS: 1. 申请阿里云免费SSL证书 阿里云\t→\t控制台\t→\t安全（云盾）→\t证书服务\t→\t购买证书 根据如下路径申请免费证书（购买详细步骤阿里云操作提示中很详细） 2. 转换证书 xxxx.pfx : 阿里云提供的SSL PFX格式文件 your-name.jks ：新文件及命名格式（可根据项目需求自行变换） 转换命令 keytool -importkeystore -srckeystore xxxx.pfx -destkeystore your-name.jks -srcstoretype PKCS12 -deststoretype JKS 3. 编辑“jetty-ssl.xml”文件 以下下操作均在“$JETTY_HOME”目录下操作\nvim etc/jetty-ssl.xml 如下配置\netc/your-name.jks\t:\t相对于Jetty根目录的jks证书位置 your-jks-password\t:\t证书密码 \u0026lt;Set name=\u0026#34;KeyStorePath\u0026#34;\u0026gt;\u0026lt;Property name=\u0026#34;jetty.base\u0026#34; default=\u0026#34;.\u0026#34; /\u0026gt;/\u0026lt;Property name=\u0026#34;jetty.keystore\u0026#34; default=\u0026#34;etc/your-name.jks\u0026#34;/\u0026gt;\u0026lt;/Set\u0026gt; \u0026lt;Set name=\u0026#34;KeyStorePassword\u0026#34;\u0026gt;\u0026lt;Property name=\u0026#34;jetty.keystore.password\u0026#34; default=\u0026#34;your-jks-password\u0026#34;/\u0026gt;\u0026lt;/Set\u0026gt; \u0026lt;Set name=\u0026#34;KeyManagerPassword\u0026#34;\u0026gt;\u0026lt;Property name=\u0026#34;jetty.keymanager.password\u0026#34; default=\u0026#34;your-jks-password\u0026#34;/\u0026gt;\u0026lt;/Set\u0026gt; \u0026lt;Set name=\u0026#34;TrustStorePath\u0026#34;\u0026gt;\u0026lt;Property name=\u0026#34;jetty.base\u0026#34; default=\u0026#34;.\u0026#34; /\u0026gt;/\u0026lt;Property name=\u0026#34;jetty.truststore\u0026#34; default=\u0026#34;etc/your-name.jks\u0026#34;/\u0026gt;\u0026lt;/Set\u0026gt; \u0026lt;Set name=\u0026#34;TrustStorePassword\u0026#34;\u0026gt;\u0026lt;Property name=\u0026#34;jetty.truststore.password\u0026#34; default=\u0026#34;your-jks-password\u0026#34;/\u0026gt;\u0026lt;/Set\u0026gt; 4. 配置\u0026quot;jetty-https.xml \u0026quot; 进入编辑\nvim etc/jetty-https.xml 检查配置\n8443\t：此处以8443位示例端口 \u0026lt;Set name=\u0026#34;host\u0026#34;\u0026gt;\u0026lt;Property name=\u0026#34;jetty.host\u0026#34; /\u0026gt;\u0026lt;/Set\u0026gt; \u0026lt;Set name=\u0026#34;port\u0026#34;\u0026gt;\u0026lt;Property name=\u0026#34;https.port\u0026#34; default=\u0026#34;8443\u0026#34; /\u0026gt;\u0026lt;/Set\u0026gt; \u0026lt;Set name=\u0026#34;idleTimeout\u0026#34;\u0026gt;\u0026lt;Property name=\u0026#34;https.timeout\u0026#34; default=\u0026#34;30000\u0026#34;/\u0026gt;\u0026lt;/Set\u0026gt; \u0026lt;Set name=\u0026#34;soLingerTime\u0026#34;\u0026gt;\u0026lt;Property name=\u0026#34;https.soLingerTime\u0026#34; default=\u0026#34;-1\u0026#34;/\u0026gt;\u0026lt;/Set\u0026gt; \u0026lt;Set name=\u0026#34;acceptorPriorityDelta\u0026#34;\u0026gt;\u0026lt;Property name=\u0026#34;ssl.acceptorPriorityDelta\u0026#34; default=\u0026#34;0\u0026#34;/\u0026gt;\u0026lt;/Set\u0026gt; \u0026lt;Set name=\u0026#34;selectorPriorityDelta\u0026#34;\u0026gt;\u0026lt;Property name=\u0026#34;ssl.selectorPriorityDelta\u0026#34; default=\u0026#34;0\u0026#34;/\u0026gt;\u0026lt;/Set\u0026gt; \u0026lt;Set name=\u0026#34;acceptQueueSize\u0026#34;\u0026gt;\u0026lt;Property name=\u0026#34;https.acceptQueueSize\u0026#34; default=\u0026#34;0\u0026#34;/\u0026gt;\u0026lt;/Set\u0026gt; 5. 配置Jetty启动文件 编辑“start.ini” vim start.ini 文件中添加如下代码(尽量在端口配置行上面添加) etc/jetty-ssl.xml etc/jetty-https.xml 6. PS: 根据网上资料亲测整理，最终解释权归WMYeah所有! 参考资料: 1、Jetty:9.2官方文档：Jetty : The Definitive Reference 2、Jetty9.2官方SSL配置文档 ","permalink":"https://www.wmyeah.com/blog/dev_linux_jetty_02/","summary":"","title":"Jetty9.2 阿里云SSL配置"},{"content":"目录：\n1. 修改HostName 2. Shell脚本中文乱码问题解决 3. 部分常用开发工具安装 4. 关闭防火墙 5. 关闭SELinux 6. 更换yum源及安装EPEL源 7. PS: 1. 修改HostName #\t设置自定义HostName hostnamectl set-hostname MyHostName #\t查看一下是否生效 hostnamectl status 2. Shell脚本中文乱码问题解决 vim /etc/locale.conf ##\t将默认语言改为中文UTF-8 LANG=zh_CN.UTF-8 3. 部分常用开发工具安装 yum -y install nano vim wget curl net-tools lsof unzip unzip 4. 关闭防火墙 systemctl stop firewalld systemctl disable firewalld 5. 关闭SELinux sed -i \u0026#39;s#SELINUX=enforcing#SELINUX=disabled#g\u0026#39; /etc/selinux/config # 查看 grep \u0026#39;SELINUX=disabled\u0026#39; /etc/selinux/config 6. 更换yum源及安装EPEL源 mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo 或者 curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo # 安装EPEL源 yum install -y epel-release # 执行清理 yum clean all # 重建缓存 yum makecache 7. PS: 根据网上资料亲测整理，最终解释权归WMYeah所有! ","permalink":"https://www.wmyeah.com/blog/dev_linux_centos7_01/","summary":"","title":"CentOS7.X 新装后个性化处理"},{"content":"目录：\n1. 说明: 2. 关于LF和CRLF的处理 处理core.autocrlf 处理core.safecrlf 处理案例: 1. 说明: git相关配置，方便跨平台 2. 关于LF和CRLF的处理 处理core.autocrlf core.autocrlf 的默认值是false core.autocrlf是git中负责处理line ending的变量，可以设置3个值： true 提交时改成LF，检出时改成CRLF input 提交时改成LF，检出时不改 false (默认值) 提交时是什么就是什么，不改换行符，检出时也不 处理core.safecrlf 默认值是warn core.safecrlf 默认值可设置3个： true 拒绝提交包含混合换行符的文件\t（会提示 Fatal:xxx） false 允许提交包含混合换行符的文件 warn 提交包含混合换行符的文件时给出警告\t(默认值) 处理案例: git config --global core.autocrlf input git config --global core.safecrlf true 根据网上资料亲测整理，最终解释权归[WMYeah][1]所有! [1]]:http://www.wmyeah.com\n","permalink":"https://www.wmyeah.com/blog/git_config_01/","summary":"","title":"git相关配置"},{"content":"目录：\n1. 说明: 2. 清除缓存 记得 带“.” 3. 将变化提交到暂存区 4. 提交并填写相关信息 5. 可选同步到远程分支 获取最新的tag 1. 说明: 有时候我们得修改忽略文件并立即生效,这样方便我们精细化管理git仓库 2. 清除缓存 记得 带“.” git rm -r --cached . 3. 将变化提交到暂存区 git add . 4. 提交并填写相关信息 git commit -m \u0026#34;update .gitignore\u0026#34; 5. 可选同步到远程分支 git push 或者 git push origin master 获取最新的tag git describe --tags --exact-match --abbrev=0 根据网上资料亲测整理，最终解释权归WMYeah所有! ","permalink":"https://www.wmyeah.com/blog/git_msg_01/","summary":"","title":"git修改忽略文件“.gitignore”并立即生效"},{"content":"目录：\n1. 工具及环境 1.1. 系统及硬件平台 1.2. 软件及相关工具包 2. PS: 1. 工具及环境 1.1. 系统及硬件平台 MacBook Air(made on 2013) MacOS Sierra(10.12.1) 1.2. 软件及相关工具包 Eclipse(Neon)Java EE IDE For Mac(主要为了省事兼顾Java后台CodeReview、根据自身需求选择Eclipse版本) ADT(23.0.7) -PS:Goole官方ADT插件 Android SDK Manager Tools(24.0.1) -PS：有了这个就可以选择下载最新的Android SDK 了（2016-3月份后SDK的下载已经不被墙了，国内多地使用过，操作地域：太原，北京、深圳、西安、上海、杭州） NDK(version-13b) 2. PS: 根据网上资料亲测整理，最终解释权归[WMYeah][1]所有!\n参考资料:\n1、[Xcode 6制作动态及静态Framework][2] [1]]:http://www.wmyeah.com\n[2]]:http://www.cocoachina.com/ios/20141126/10322.html\n","permalink":"https://www.wmyeah.com/blog/android_01/","summary":"","title":"Android JNI编译so动态库技巧(Mac环境)"},{"content":"目录：\n1. 说明 2. 准备串口线及对应串口传唤器驱动 2.1. 线材准备 2.2. 对应驱动准备 3. 下载可视化连接工具\u0026quot;CoolTerm_Mac\u0026quot; 4. 验证是否驱动安装完成 5. PS: 1. 说明 WARNING 凡所涉及线材及设备,请自行准备此处仅为当前条件随便购买 2. 准备串口线及对应串口传唤器驱动 2.1. 线材准备 优越者 Y-105 USB转RS232 工口\n优越者 Y-105D USB转RS232 母口\n2.2. 对应驱动准备 购买线材时随附光盘中一般会有\n点这里下载基于PL-2303芯片驱动\n点这里下载CH430G For Mac 驱动下载\n点这里下载CH430G For Linux 驱动下载\n3. 下载可视化连接工具\u0026quot;CoolTerm_Mac\u0026quot; CoolTerm_Mac下载地址 4. 验证是否驱动安装完成 设置连接选项\n在另一台准备好的机器上输入测试字符\n5. PS: 根据网上资料亲测整理，最终解释权归WMYeah所有!\n参考资料:\n1、Roger Meier\u0026rsquo;s Freeware 2、Mac\u0026rsquo;s and serial TTY\u0026rsquo;s 2、在MAC OS X下安装usb转串口驱动（PL2303主控芯片） ","permalink":"https://www.wmyeah.com/blog/embedded_01/","summary":"","title":"嵌入式开发之MacOS、iOS串口通讯开发环境准备"},{"content":" 1. ubuntu lvm 扩容 2. 内存虚拟盘 2.1. 临时挂载 2.2. 永久挂载 1. ubuntu lvm 扩容 lvextend -l +100%FREE /dev/mapper/ubuntu--vg-ubuntu--lv resize2fs /dev/mapper/ubuntu--vg-ubuntu--lv 2. 内存虚拟盘 2.1. 临时挂载 mount -t tmpfs -o size=512G tmpfs /datas/plots_tmp 2.2. 永久挂载 vim /etc/fstab tmpfs\t/datas/plots_tmp\ttmpfs\tdefaults,size=512G\t0 0 ","permalink":"https://www.wmyeah.com/blog/ubuntu_lvm_extentions/","summary":"","title":"ubuntu lvm 扩容"},{"content":"目录：\n1. 说明: 2. CMD命令 3. PS: 1. 说明: WARNING 请谨慎使用此命令，一切造成的后果请各位自行承担 2. CMD命令 for /f \u0026#34;skip=9 tokens=1,2 delims=:\u0026#34; %i in (\u0026#39;netsh wlan show profiles\u0026#39;) do @echo %j | findstr -i -v echo | netsh wlan show profiles %j key=clear 3. PS: 根据网上资料亲测整理，最终解释权归WMYeah所有! ","permalink":"https://www.wmyeah.com/blog/dev_other_00/","summary":"","title":"Windows 一键查看已连接过的WIFI密码"},{"content":"目录：\n1. 搜索 Library 设置工程模式为 Static Library 2. 注意事项: 3. Run Sripte 内容如下 4. 脚本设置成功后 直接选择Target “Comand + B” 编译就OK 5. PS: 1. 搜索 Library 设置工程模式为 Static Library 2. 注意事项: -Option 目前支持选项 Source.boundle 即同名资源Bundle文件 3. Run Sripte 内容如下 # 如果工程名称和Framework的Target名称不一样的话，要自定义FMKNAME 例如: FMK_NAME = \u0026#34;MyFramework\u0026#34; FMK_NAME=${PROJECT_NAME} # ---Option 打包资源Bundle FMK_Source_NAME=${PROJECT_NAME}\u0026#34;Source\u0026#34; # 设置打包导出目录 INSTALL_DIR_SRC=${SRCROOT}/Libs/${FMK_NAME} INSTALL_DIR=${INSTALL_DIR_SRC}/${FMK_NAME}.framework # 设置打包源文件空间 WRK_DIR=build DEVICE_DIR=${WRK_DIR}/Release-iphoneos/${FMK_NAME}.framework SIMULATOR_DIR=${WRK_DIR}/Release-iphonesimulator/${FMK_NAME}.framework # Bundle文件目录 FMK_Source_DIR=${WRK_DIR}/Release-iphoneos/${FMK_Source_NAME}.bundle # xcodebuild 命令相关设置 # Clean and Building both architectures. xcodebuild -configuration \u0026#34;Release\u0026#34; -target \u0026#34;${FMK_NAME}\u0026#34; -sdk iphoneos clean build xcodebuild -configuration \u0026#34;Release\u0026#34; -target \u0026#34;${FMK_NAME}\u0026#34; -sdk iphonesimulator clean build # 使用xcodebuild 打包Bundle xcodebuild -configuration \u0026#34;Release\u0026#34; -target \u0026#34;${FMK_Source_NAME}\u0026#34; -sdk iphoneos clean build # 清除并新建INSTALL_DIR目录 if [ -d \u0026#34;${INSTALL_DIR}\u0026#34; ] then rm -rf \u0026#34;${INSTALL_DIR}\u0026#34; fi mkdir -p \u0026#34;${INSTALL_DIR}\u0026#34; # 拷贝 .Framework 文件到 INSTALL_DIR目录 cp -R \u0026#34;${DEVICE_DIR}/\u0026#34; \u0026#34;${INSTALL_DIR}/\u0026#34; # ---Option Bundle拷贝资源文件 cp -R \u0026#34;${FMK_Source_DIR}\u0026#34; \u0026#34;${INSTALL_DIR}/\u0026#34; # Uses the Lipo Tool to merge both binary files (i386 + armv6/armv7) into one Universal final product. lipo -create \u0026#34;${DEVICE_DIR}/${FMK_NAME}\u0026#34; \u0026#34;${SIMULATOR_DIR}/${FMK_NAME}\u0026#34; -output \u0026#34;${INSTALL_DIR}/${FMK_NAME}\u0026#34; ln -s ${INSTALL_DIR}/${FMK_Source_NAME}.bundle ${INSTALL_DIR_SRC}/${FMK_Source_NAME}.bundle # 清理工程 rm -r \u0026#34;${WRK_DIR}\u0026#34; rm -r \u0026#34;${INSTALL_DIR}/_CodeSignature\u0026#34; rm -r \u0026#34;${INSTALL_DIR}/Info.plist\u0026#34; rm -r \u0026#34;${INSTALL_DIR}/Modules\u0026#34; # ---Option rm -r \u0026#34;${INSTALL_DIR}/${FMK_Source_NAME}.bundle/Info.plist\u0026#34; # 打开打包好的工程目录 open \u0026#34;${INSTALL_DIR_SRC}\u0026#34; 4. 脚本设置成功后 直接选择Target “Comand + B” 编译就OK 5. PS: 根据网上资料亲测整理，最终解释权归WMYeah所有!\n参考资料:\n1、Xcode 6制作动态及静态Framework ","permalink":"https://www.wmyeah.com/blog/ios_01/","summary":"","title":"iOS .Framework SDK开发注意事项"},{"content":"目录：\n1. 说明: 2. Git操作 2.1. 将变化提交到暂存区 2.2. 提交并填写相关信息 2.3. 打tag 2.4. 同步tag 3. pod trunk相关 3.1. 注册pod trunk 3.2. 在项目根目录下，创建podspec文件 3.3. 查看注册信息 3.4. 验证Pods库是否正确 3.5. 上传至cocoaPods 4. PS: 1. 说明: 记录常用命令用以备忘 2. Git操作 2.1. 将变化提交到暂存区 git add . 2.2. 提交并填写相关信息 git commit -m \u0026#34;release-Version-xxx\u0026#34; 2.3. 打tag git tag x.x.x 2.4. 同步tag git push --tags 3. pod trunk相关 3.1. 注册pod trunk # Description 为描述 # xxx@xxx.com 为邮箱 # --tag 为标识 #--description 自我描述 pod trunk register xxx@xxx.com \u0026#39;--Tag\u0026#39; --description=\u0026#39;Description\u0026#39; 3.2. 在项目根目录下，创建podspec文件 # PodName 为定义开源库名 pod spec create PodName 3.3. 查看注册信息 pod trunk me 3.4. 验证Pods库是否正确 # 验证线上 pod spec lint XXX.podspec # 验证本地 pod lib lint --allow-warnings --allow-warnings 指忽略警告 3.5. 上传至cocoaPods pod trunk push --allow-warnings 4. PS: 根据网上资料亲测整理，最终解释权归WMYeah所有! ","permalink":"https://www.wmyeah.com/blog/ios_02/","summary":"","title":"制作cocoapods开源库-命令备忘"},{"content":"目录：\n1. 查看443的TCP连接数 2. PS: 1. 查看443的TCP连接数 netstat -anp | grep :443 | grep ESTABLISHED | wc -l 或者\nlsof -i:443 | grep ESTABLISHED | grep TCP | wc -l 2. PS: 根据网上资料亲测整理，最终解释权归[WMYeah][1]所有! [1]]:http://www.wmyeah.com\n","permalink":"https://www.wmyeah.com/blog/linux_net_01/","summary":"","title":"Linux Net相关命令收集"},{"content":"目录：\n1. 说明: 2. 停止mysql 3. 建立迁移目的地文件夹 4. 修改所属用户及所属用户组为mysql 5. 修改权限 6. 拷贝\u0026quot;/var/lib/mysql/*\u0026ldquo;所有文件 7. 修改mysql的配置文件 8. 修改shell文件 9. 重新启动apparmor和mysql 10. 删除原有文件 (-Option) 11. PS: 1. 说明: parmars -mysqlDir- 新的mysql存储目录\n例如：/home/mysqlData/ WARNING 注意代码中的引用到的参数\n2. 停止mysql sudo service mysql stop 3. 建立迁移目的地文件夹 sudo mkdir -p -mysqlDir- 4. 修改所属用户及所属用户组为mysql sudo chown -vR mysql:mysql -mysqlDir- 5. 修改权限 sudo chmod -vR 700 -mysqlDir- 6. 拷贝\u0026rdquo;/var/lib/mysql/*\u0026ldquo;所有文件 sudo cp -av /var/lib/mysql/* -mysqlDir- 7. 修改mysql的配置文件 sudo vi /etc/mysql/my.cnf 将\ndatadir=/var/lib/mysql/ 修改为\ndatadir=-mysqlDir- 8. 修改shell文件 sudo vi /etc/apparmor.d/usr.sbin.mysqld 将\n/var/lib/mysql/ r, /var/lib/mysql/** rwk, 修改为\n-mysqlDir- r, -mysqlDir-** rwk, 9. 重新启动apparmor和mysql sudo service apparmor reload sudo service mysql start 10. 删除原有文件 (-Option) sudo rm -rvf /var/lib/mysql/ 11. PS: 根据网上资料亲测整理，最终解释权归WMYeah所有!\n参考资料:\n1、ubuntu14.04 下 mysql 存储目录迁移 2、mysql数据库的使用与理解（基于ubuntu14.0.4LTS64位） 2、ubuntu14.04下mysql数据库的默认存放路径并修改 ","permalink":"https://www.wmyeah.com/blog/dev_linux_05/","summary":"","title":"Ubuntu 14.0.4 mysql 存储目录迁移"},{"content":"目录：\nmcryp模块安装 mcrypt模块加载 1. 开启mcrypt模块 2. 查看apache2 配置文件 重启apache2 PS: mcryp模块安装 sudo apt-get install php5-mcrypt mcrypt模块加载 1. 开启mcrypt模块 sudo php5enmod mcrypt 2. 查看apache2 配置文件 进入目录：\u0026quot;/etc/php5/apache2/conf.d/\u0026quot; 和 \u0026ldquo;/etc/php5/mods-available/\u0026rdquo; 检查是否有mcrypt.ini文件 重启apache2 sudo service apache2 restart PS: 根据网上资料亲测整理，最终解释权归[WMYeah][1]所有!\n参考资料:\n1、[缺少 mcrypt 扩展。请检查 PHP 配置。][2] [1]]:http://www.wmyeah.com\n[2]]:http://blog.csdn.net/wang1144/article/details/51505887?locationNum=12\n","permalink":"https://www.wmyeah.com/blog/dev_linux_01/","summary":"","title":"Ubuntu 14.0.4 phpMyAdmin 报错：\"缺少mcrypt扩展,请检查 PHP 配置\"解决方案"},{"content":"目录：\n1. 说明 2. 添加用户并配置git用户HOME目录 3. 将用户添加到SSH服务组 4. 设置Git密码 5. 配置GitGlobal 6. 生成SSHKey 7. 拷贝并重命名 .Pub 公钥 8. clone Git源码库 9. 新建\u0026quot;$HOME/bin\u0026quot;文件夹 10. 将git安装到\u0026quot;$HOME/bin\u0026quot;目录 11. 初始化gitolite程序 12. clone gitolite管理库\u0026quot;gitolite-admin.git\u0026quot; 13. PS: 1. 说明 parmars -gitHomeDir- git用户HOME目录\n例如：/home/git/ parmars -USERNAME- //用户名\nparmars -git_User_Name- //用户名\nparmars -git_User_Email- //Email\nWARNING 注意代码中的引用到的参数\n2. 添加用户并配置git用户HOME目录 sudo adduser --system --shell /bin/bash --home -gitHomeDir- --group git sudo adduser --system --shell /bin/bash --home /datas/git- --group git 3. 将用户添加到SSH服务组 sudo adduser git ssh 4. 设置Git密码 sudo passwd git 5. 配置GitGlobal git config --global user.name \u0026#34;-git_User_Name-\u0026#34; git config --global user.email \u0026#34;Email\u0026#34; 6. 生成SSHKey ssh-keygen -t rsa -C \u0026#34;-git_User_Email-\u0026#34; 连按3此回车结束(-Option 也可以根据需求设置详细密码) 7. 拷贝并重命名 .Pub 公钥 cp .ssh/id_rsa.pub ./-USERNAME-.pub 8. clone Git源码库 git clone git://github.com/sitaramc/gitolite 9. 新建\u0026quot;$HOME/bin\u0026quot;文件夹 mkdir -p $HOME/bin 10. 将git安装到\u0026quot;$HOME/bin\u0026quot;目录 gitolite/install -to $HOME/bin 11. 初始化gitolite程序 $HOME/bin/gitolite setup -pk YourName.pub 12. clone gitolite管理库\u0026quot;gitolite-admin.git\u0026quot; git clone git@127.0.0.1:gitolite-admin.git 13. PS: 根据网上资料亲测整理，最终解释权归WMYeah所有!\n参考资料:\n1、gitolite README.markdown 2、gitolite wiki 2、Ubuntu下安装Git和Gitolite ","permalink":"https://www.wmyeah.com/blog/dev_linux_07/","summary":"","title":"Ubuntu 14.0.4 安装并配置Gitolite服务器"},{"content":"目录：\n1. 参数说明 2. 编辑\u0026quot;/etc/network/interfaces\u0026quot;文件 3. 编辑\u0026quot;/etc/resolvconf/resolv.conf.d/base\u0026quot;文件 4. 重启networking服务使其生效： 5. PS: 1. 参数说明 本例以192.168.1.0(255.255.255.0)网段为例 2. 编辑\u0026quot;/etc/network/interfaces\u0026quot;文件 sudo vi /etc/network/interfaces 新增如下内容\nauto eth0 iface eth0 inet static address 192.168.1.88 netmask 255.255.255.0 gateway 192.168.1.1 3. 编辑\u0026quot;/etc/resolvconf/resolv.conf.d/base\u0026quot;文件 sudo vi /etc/resolvconf/resolv.conf.d/base 输入如下内容\nnameserver 192.168.1.1 nameserver 8.8.8.8 4. 重启networking服务使其生效： /etc/init.d/networking restart 5. PS: 根据网上资料亲测整理，最终解释权归WMYeah所有!\n参考资料:\n1、ubuntu 14.10系统怎么设置静态ip？ 2、Ubuntu Server 12.04(14.04) 静态IP简洁配置 ","permalink":"https://www.wmyeah.com/blog/dev_linux_04/","summary":"","title":"Ubuntu 14.0.4 配置静态IP"},{"content":"目录：\n1. 说明： 2. 创建存放所有Web项目的相关目录 2.1. web 根目录 2.2. 项目A 根目录 2.3. 项目B 根目录 2.4. 赋予相关目录权限 3. apache2.conf 相关设置 3.1. 备份原有配置文件 3.2. 编辑 apache2.conf 4. 设置 apache 虚拟主机 4.1. 编辑 -Domain_A-.conf 文件 4.1.1. 拷贝样例 4.1.2. 编辑 4.1.2.1. 根据需求设置 4.1.2.2. 设置https支持 (-Option) 4.2. 编辑-Domain_B-.conf文件 5. 启用配置 5.1. 进入 “/etc/apache2/sites-available” 目录 5.2. 禁用系统默认解析文件 “000-default.conf” 5.3. 启用配置好的文件 “-Domain_A-.conf” 6. 开启apache ssl支持 (-Option) 7. 重启Apache2服务 8. 访问站点: 9. PS: 1. 说明： parmars -webDir- 存放所有Web项目的Linux文件系统绝对目录\n例如：/home/webSite parmars -webSubDir_A- web项目A根目录\n例如：/home/webSite/webA parmars -webSubDir_B- web项目A根目录\n例如：/home/webSite/webB parmars [-Domain_A-] webA域名\n例如：a.wmyeah.com parmars [-Domain_B-] webB域名\n例如：b.wmyeah.com parmars -SSL_File_Path- SSL文件存放位置 (-Option)\n例如：/home/SSLFiles 2. 创建存放所有Web项目的相关目录 2.1. web 根目录 sudo mkdir -p -webDir- 2.2. 项目A 根目录 sudo mkdir -p -webSubDir_A- 2.3. 项目B 根目录 sudo mkdir -p -webSubDir_B- 2.4. 赋予相关目录权限 sudo chown -R $USER:$USER -webDir- sudo chown -R $USER:$USER -webDir_A- sudo chown -R $USER:$USER -webDir_B- 3. apache2.conf 相关设置 3.1. 备份原有配置文件 ```cp /etc/apache2/apache2.conf /etc/apache2/apache2.conf.bak``` 3.2. 编辑 apache2.conf ```sudo vi /etc/apache2/apache2.conf``` * 将 ``` \u0026lt;Directory /var/www/\u0026gt; Options Indexes FollowSymLinks AllowOverride All Require all granted \u0026lt;/Directory\u0026gt; ``` * 改为 ``` \u0026lt;Directory /zx_dev/webSite/\u0026gt; Options Indexes FollowSymLinks AllowOverride All Require all granted \u0026lt;/Directory\u0026gt; ``` 保存退出 4. 设置 apache 虚拟主机 4.1. 编辑 -Domain_A-.conf 文件 4.1.1. 拷贝样例 sudo cp /etc/apache2/sites-available/000-default.conf /etc/apache2/sites-available/-Domain_A-.conf 4.1.2. 编辑 sudo vi /etc/apache2/sites-available/-Domain_A-.conf 4.1.2.1. 根据需求设置 \u0026lt;VirtualHost *:80\u0026gt; // 端口 ServerName -Domain_A-\t// 域名 ServerAdmin webmaster@-Domain_A- // 管理员邮箱 DocumentRoot -webDir_A-\t// 项目根目录 4.1.2.2. 设置https支持 (-Option) 在“ \u0026lt;VirtualHost *:80 ”上方添加 “Listen 443” Listen 443 \u0026lt;VirtualHost *:80\u0026gt; 开启SSL并添加Key文件 SSLEngine on SSLCertificateFile -SSL_File_Path-/-Domain_A-.crt SSLCertificateKeyFile -SSL_File_Path-/-Domain_A-.key SSLCACertificateFile -SSL_File_Path-/-Domain_A-_Bundle.crt 4.2. 编辑-Domain_B-.conf文件 请参照4.1 5. 启用配置 5.1. 进入 “/etc/apache2/sites-available” 目录 cd /etc/apache2/sites-available/ 5.2. 禁用系统默认解析文件 “000-default.conf” sudo a2dissite 000-default.conf 5.3. 启用配置好的文件 “-Domain_A-.conf” sudo a2ensite -Domain_A-.conf 6. 开启apache ssl支持 (-Option) sudo a2enmod ssl 7. 重启Apache2服务 sudo service apache2 restart 8. 访问站点: 在浏览器中输入“https://domain”访问 (ps:domain 为 服务器IP地址或者已指向服务器的域名) 9. PS: 根据网上资料亲测整理，最终解释权归WMYeah所有!\n参考资料:\n1、LAMP（Apache）环境部署安装SSL安全证书且可HTTPS加密网站 2、linux下的apache部署ssl证书 2、如何在Ubuntu 14.04 上为Apache 2.4 安装SSL支持 ","permalink":"https://www.wmyeah.com/blog/dev_linux_03/","summary":"","title":"在Ubuntu 14.0.4 LTS Apache virtualhost 虚拟主机相关设置(包含https)"},{"content":"目录：\n1. 安装mysql-server、mysql-client 2. 安装apache2 3. 安装php5 php5 libapache2-mod-php5(apache php5支持模块) 4. 安装php5常用模块 5. 安装数据库管理工具 phpMyadmin 6. 重启apache2 7. 访问站点: 8. PS: 1. 安装mysql-server、mysql-client sudo apt-get install mysql-server mysql-client 2. 安装apache2 sudo apt-get install apache2 3. 安装php5 php5 libapache2-mod-php5(apache php5支持模块) sudo apt-get install php5 libapache2-mod-php5 4. 安装php5常用模块 sudo apt-get install php5-mysql php5-curl php5-gd php5-intl php-pear php5-imagick php5-imap php5-mcrypt php5-memcache php5-ming php5-ps php5-pspell php5-recode php5-snmp php5-sqlite php5-tidy php5-xmlrpc php5-xsl``` 5. 安装数据库管理工具 phpMyadmin sudo apt-get install phpmyadmin 6. 重启apache2 sudo service apache2 restart 7. 访问站点: LocalHost模式:\t再浏览器中输入“http://127.0.0.1” 或 “http://localhost” 访问\n远程模式: 再浏览器中输入“http://domain”访问 (ps:domain 为 服务器IP地址或者已指向服务器的域名)\n8. PS: 根据网上资料亲测整理，最终解释权归[WMYeah][1]所有!\n参考资料:\n1、[Linux Ubuntu 14.04安装LAMP（Apache+MySQL+PHP）网站环境][2] 2、[Ubuntu Server 14.04 安装 LAMP][3] 2、[ubuntu14.04搭建web服务器lamp][4] [1]]:http://www.wmyeah.com\n[2]]:http://www.jianshu.com/p/135697b3ff0d\n[3]]:http://www.linuxidc.com/Linux/2015-03/115136.htm\n[4]]:http://jingyan.baidu.com/article/ceb9fb10d572d88cad2ba093.html\n","permalink":"https://www.wmyeah.com/blog/dev_linux_02/","summary":"","title":"Ubuntu 14.0.4搭建LAMP+phpmyadmin Web服务器"},{"content":"目录：\n1. 、国内常用NTP服务器 2. 、使用Let\u0026rsquo;s Encrypt 申请 泛域名ssl证书 3. PS: 1. 、国内常用NTP服务器 国家授时中心新的NTP服务器地址： ntp.ntsc.ac.cn 阿里云 ntp.aliyun.com 国内大学 s1c.time.edu.cn 北京大学 s2m.time.edu.cn 北京大学 s1b.time.edu.cn 清华大学 s1e.time.edu.cn 清华大学 s2a.time.edu.cn 清华大学 s2b.time.edu.cn 清华大学 国外授时服务器 #苹果提供的授时服务器 time1.apple.com time2.apple.com time3.apple.com time4.apple.com time5.apple.com time6.apple.com time7.apple.com #Google提供的授时服务器 time1.google.com time2.google.com time3.google.com time4.google.com 2. 、使用Let\u0026rsquo;s Encrypt 申请 泛域名ssl证书 命令（Ubuntu serve 18.04.4） certbot certonly --preferred-challenges dns --manual -d *.example.com --server https://acme-v02.api.letsencrypt.org/directory 需要dns验证 自己操作增加txt 验证即可 默认在 /etc/letsencrypt/live/ 目录下 为了和阿里云配置保持同步做了两个注记命令 阿里云为 pem 和 key 结尾 这里都是pem cp /etc/letsencrypt/live/$mydomain.com/fullchain.pem ~/$mydomain.com_fullchain.pem cp /etc/letsencrypt/live/$mydomain.com/privkey.pem ~/$mydomain.com_fullchain_privkey.pem 3. PS: 根据网上资料亲测整理，最终解释权归WMYeah所有! ","permalink":"https://www.wmyeah.com/blog/linux_ntp_01/","summary":"","title":"Linux 基操"},{"content":"目录：\n1. 说明: 2. 安装subversion 3. 创建版本库 4. 配置\u0026quot;svnserve.conf\u0026quot;版本库信息 5. 配置\u0026quot;passwd\u0026quot;用户信息 6. 配置\u0026quot;authz\u0026quot;用户授权 7. 设置开机自启动SVN服务 8. PS: 1. 说明: parmars -svnDir- SVN项目统一存放路径\n例如：/home/svnProjects/ parmars -svnDir_Project01- 暂命名为“Project01”的SVN库地址\n例如：/home/svnProjects/svnP1/ WARNING 注意代码中的引用到的参数\n2. 安装subversion sudo apt-get install subversion 3. 创建版本库 sudo mkdir -p -svnDir_Project01- sudo svnadmin create -svnDir_Project01- 4. 配置\u0026quot;svnserve.conf\u0026quot;版本库信息 sudo vi -svnDir_Project01-/conf/svnserve.conf 将以下参数注释掉\n[general] anon-access = none #匿名访问权限，默认read，none为不允许访问 auth-access = write #认证用户权限 password-db = passwd #用户信息，默认在版本库/conf下面,如需更改请填写文件绝对路径 authz-db = authz 5. 配置\u0026quot;passwd\u0026quot;用户信息 sudo vi -svnDir_Project01-/conf/passwd 按如下格式添加用户\n[users] zhangsan = 123 lisi = 123 wangwu = 123 6. 配置\u0026quot;authz\u0026quot;用户授权 sudo vi -svnDir_Project01-/conf/authz 按如下格式修改或添加用户授权信息\n[groups] #定义组的用户 manager = zhangsan core_dev = lisi,wangwu #以此版本库根目录为基准下发权限物理位置为\u0026#34;-svnDir_Project01-\u0026#34; [/] #manager组用户对根目录有读写权限 @manager = rw [/dev] #core_dev对dev子目录为读写权限 @core_dev = rw 7. 设置开机自启动SVN服务 进入\u0026quot;/etc/init.d/\u0026ldquo;目录\ncd /etc/init.d/ sudo vi runSVN .sh 输入如下内容 此处为存放所有SVN版本库的目录的绝对地址\n#!/bin/bash svnserve -d -r -svnDir- 保存退出并修改权限\nsudo chmod 777 runSVN.sh sudo update-rc.d runSVN.sh defaults 8. PS: 根据网上资料亲测整理，最终解释权归WMYeah所有!\n参考资料:\n1、High-Speed Tutorial Appendix A. Subversion Quick-Start Guide 2、ubuntu 14.04 下搭建SVN服务器 svn:// 2、Ubuntu 14.0.4系统下SVN的安装与配置 ","permalink":"https://www.wmyeah.com/blog/dev_linux_06/","summary":"","title":"Ubuntu 14.0.4 Linux SVN Server搭建"},{"content":"","permalink":"https://www.wmyeah.com/contact/","summary":"How can I help you?","title":"Contact Me"}]