<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Git on WMYeah</title><link>https://www.wmyeah.com/categories/git/</link><description>Recent content in Git on WMYeah</description><image><url>https://www.wmyeah.com/uploads/og.webp</url><link>https://www.wmyeah.com/uploads/og.webp</link></image><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>A template by [Heksagon](https://www.heksagon.net "Your most friendly developer")</copyright><lastBuildDate>Wed, 25 Dec 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://www.wmyeah.com/categories/git/index.xml" rel="self" type="application/rss+xml"/><item><title>利用Crontab 定时任务自动git pull更新代码</title><link>https://www.wmyeah.com/blog/git_auto-gitpull/</link><pubDate>Wed, 25 Dec 2019 00:00:00 +0000</pubDate><guid>https://www.wmyeah.com/blog/git_auto-gitpull/</guid><description>目录：
1. Crontab操作 2. 在需要更新的git项目文件夹内编辑git_pull.sh 3. PS: 1. Crontab操作 1-1、编辑crontab
crontab -e 1-2、将以下代码放入脚本
# 脚本目录、日志目录 根据自己实际情况设定 */2 * * * * /home/git_test/git_pull.sh &amp;gt;&amp;gt; /home/logs/git_pull.log 2&amp;gt;&amp;amp;1 &amp;amp; 2. 在需要更新的git项目文件夹内编辑git_pull.sh 2-1、编辑
vim git_pull.sh 2-2、内容
#!/bin/bash cu_sp_path=/home/git_test cd ${cu_sp_path} &amp;amp;&amp;amp; git pull echo &amp;#34;[&amp;#34;${cu_sp_path}&amp;#34;] update with [&amp;#34;`date`&amp;#34;]&amp;#34; 2-3、赋予权限
chmod -R 777 git_pull.sh 3. PS: 根据网上资料亲测整理，最终解释权归WMYeah所有!</description></item><item><title>git相关配置</title><link>https://www.wmyeah.com/blog/git_config_01/</link><pubDate>Mon, 17 Jul 2017 00:00:00 +0000</pubDate><guid>https://www.wmyeah.com/blog/git_config_01/</guid><description>目录：
1. 说明: 2. 关于LF和CRLF的处理 处理core.autocrlf 处理core.safecrlf 处理案例: 1. 说明: git相关配置，方便跨平台 2. 关于LF和CRLF的处理 处理core.autocrlf core.autocrlf 的默认值是false core.autocrlf是git中负责处理line ending的变量，可以设置3个值： true 提交时改成LF，检出时改成CRLF input 提交时改成LF，检出时不改 false (默认值) 提交时是什么就是什么，不改换行符，检出时也不 处理core.safecrlf 默认值是warn core.safecrlf 默认值可设置3个： true 拒绝提交包含混合换行符的文件 （会提示 Fatal:xxx） false 允许提交包含混合换行符的文件 warn 提交包含混合换行符的文件时给出警告 (默认值) 处理案例: git config --global core.autocrlf input git config --global core.safecrlf true 根据网上资料亲测整理，最终解释权归[WMYeah][1]所有! [1]]:http://www.wmyeah.com</description></item><item><title>git修改忽略文件“.gitignore”并立即生效</title><link>https://www.wmyeah.com/blog/git_msg_01/</link><pubDate>Mon, 20 Feb 2017 00:00:00 +0000</pubDate><guid>https://www.wmyeah.com/blog/git_msg_01/</guid><description>目录：
1. 说明: 2. 清除缓存 记得 带“.” 3. 将变化提交到暂存区 4. 提交并填写相关信息 5. 可选同步到远程分支 获取最新的tag 1. 说明: 有时候我们得修改忽略文件并立即生效,这样方便我们精细化管理git仓库 2. 清除缓存 记得 带“.” git rm -r --cached . 3. 将变化提交到暂存区 git add . 4. 提交并填写相关信息 git commit -m &amp;#34;update .gitignore&amp;#34; 5. 可选同步到远程分支 git push 或者 git push origin master 获取最新的tag git describe --tags --exact-match --abbrev=0 根据网上资料亲测整理，最终解释权归WMYeah所有!</description></item></channel></rss>